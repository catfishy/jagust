braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.nonzerocoef
pattern.lars.sigcoef
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.2 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
braak.lars.r2
pattern.lars.r2
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.sigcoef
braak_form
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
#target = "UW_EF_AV1451_1"
#target = "UW_MEM_AV1451_1"
target = "ADAS_AV1451_1"
#target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
for (i in names(df_av1451)){
if (i %in% to_factor){
df_av1451[,eval(i)] = as.factor(as.character(df_av1451[,eval(i)]))
}
}
# Filter by diag
# df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
# diag_str = 'Diag.AV1451*APOE4_BIN +'
# diag_str = 'Diag.AV1451 +'
diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
pattern.lars.sigcoef
braak.lars.sigcoef
braak.lars.r2
pattern.lars.r2
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
pattern_form
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
target = "UW_EF_AV1451_1"
#target = "UW_MEM_AV1451_1"
#target = "ADAS_AV1451_1"
#target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
for (i in names(df_av1451)){
if (i %in% to_factor){
df_av1451[,eval(i)] = as.factor(as.character(df_av1451[,eval(i)]))
}
}
# Filter by diag
# df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
# diag_str = 'Diag.AV1451*APOE4_BIN +'
# diag_str = 'Diag.AV1451 +'
diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
pattern.lars.r2
braak.lars.r2
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
pattern.lars.sigcoef
braak.lars.sigcoef
pattern.lars.r2
braak.lars.r2
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
braak.lars.sigcoef
pattern.lars.sigcoef
demean
?preProcess
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
target_normalization = preProcess(df_av1451[,target],method='center')
df_av1451[,target] = predict(target_normalization, df_av1451[,target])
target_normalization = preProcess(df_av1451[,c(target)],method='center')
df_av1451[,c(target)] = predict(target_normalization, df_av1451[,c(target)])
Jmean
install.packages('Jmean')
install.packages('Jmisc')
library(Jmisc)
target
df_av1451[,target]
df_av1451[,target] = scale(df_av1451[,target], center=TRUE, scale=FALSE)
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(Jmisc)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
#target = "UW_EF_AV1451_1"
target = "UW_MEM_AV1451_1"
#target = "ADAS_AV1451_1"
#target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
for (i in names(df_av1451)){
if (i %in% to_factor){
df_av1451[,eval(i)] = as.factor(as.character(df_av1451[,eval(i)]))
}
}
# Filter by diag
# df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
#df_av1451[,target] = scale(df_av1451[,target], center=TRUE, scale=FALSE)
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
# diag_str = 'Diag.AV1451*APOE4_BIN +'
# diag_str = 'Diag.AV1451 +'
diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.sigcoef
pattern.lars.r2
braak.lars.r2
rfe.braak = run.rfe(braak_form, target, df_av1451, 2)
rfe.pattern = run.rfe(pattern_form, target, df_av1451, 2)
fm_braak = rfe.braak$fit
fm_pattern = rfe.pattern$fit
rfe.braak
rfe.pattern
target
fm_braak.summary = summary(fm_braak)
fm_pattern.summary = summary(fm_pattern)
fm_braak.fit = sem.model.fits(fm_braak)
fm_pattern.fit = sem.model.fits(fm_pattern)
fm_braak.fit
fm_pattern.fit
fm_pattern.summary
fm_braak.summary
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.sigcoef
braak.lars.r2
pattern.lars.r2
target
