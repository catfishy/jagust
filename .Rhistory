X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X6*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X13*APOE4_BIN +
X14*APOE4_BIN +
X15*APOE4_BIN +
X20*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
X24*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
# summaries
fm_av45_nopattern_summary = summary(fm_av45_nopattern)
fm_av45_summary = summary(fm_av45)
fm_av45_onlypatterns_summary = summary(fm_av45_onlypatterns)
fm_av45_onlypatterns_summary
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
threshold = 1.15
isPatternColumn = function(i){
if (startsWith(i,'X')) return(TRUE) else return(FALSE)
}
isPatternColumn = Vectorize(isPatternColumn)
# Import data
df_av45 = read.csv('dpgmm_alpha12.66_bilateral_AV45_ALL_longdata_slope.csv')
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_patterns = df_av45[pattern_columns]
# demean pattern variables + binary variables
# bin_variables = c('Gender','CORTICAL_SUMMARY_POSITIVE','APOE2_BIN','APOE4_BIN')
# pattern_columns = c()
# for (i in names(df_av45)){
#   if (startsWith(i,'X') | i %in% bin_variables){
#     df_av45[,eval(i)] = (df_av45[,eval(i)] * 2) - 1.0
#   }
# }
# Run PCA
df_patterns.pca = prcomp(df_patterns, center=TRUE, scale.s=TRUE)
df_patterns.pca_rotation = df_patterns.pca$rotation
df_patterns.transformed = predict(df_patterns.pca)
df_av45 = as.data.frame(cbind(as.matrix(df_av45),df_patterns.transformed))
# Convert to non factors to floats
to_factor = c('RID','diag_prior','APOE4_BIN','APOE2_BIN','Gender')
for (i in names(df_av45)){
if (!(i %in% to_factor)){
df_av45[,eval(i)] = as.numeric(as.character(df_av45[,eval(i)]))
}
}
# Only keep N/SMC/EMCI/LMCI
valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('EMCI','LMCI')
#valid_diags = c('N','SMC')
#df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
# Only keep negative
df_av45 = df_av45[which(df_av45$CORTICAL_SUMMARY_prior <= threshold),]
# Choose valid groups
group_desc = describeBy(df_av45$CORTICAL_SUMMARY_prior,df_av45$group)
# pattern weight models
fm_av45_onlycs = lm(CORTICAL_SUMMARY_slope ~ CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2), df_av45)
fm_av45_nopattern = lm(CORTICAL_SUMMARY_slope ~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45 = lm(CORTICAL_SUMMARY_slope ~ diag_prior +
CORTICAL_SUMMARY_prior*APOE4_BIN +
I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45_onlypatterns = lm(CORTICAL_SUMMARY_slope ~ diag_prior +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
# summaries
fm_av45_nopattern_summary = summary(fm_av45_nopattern)
fm_av45_summary = summary(fm_av45)
fm_av45_onlypatterns_summary = summary(fm_av45_onlypatterns)
fm_av45_nopattern_summary$adj.r.squared
fm_av45_summary$adj.r.squared
fm_av45_onlypatterns_summary$adj.r.squared
# anova
fm_av45_nopattern_anova = Anova(fm_av45_nopattern,type='III')
fm_av45_anova = Anova(fm_av45,type='III')
fm_av45_onlypatterns_anova = Anova(fm_av45_onlypatterns,type='III')
# anova model comparisons
fm_modelcomparison_anova = anova(fm_av45_nopattern, fm_av45, test='LRT')
fm_mc_anova = anova(fm_av45_nopattern, fm_av45, test='LRT')
fm_mc_anova
fm_av45_summary
table(df_av45$group)
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
threshold = 1.15
isPatternColumn = function(i){
if (startsWith(i,'X')) return(TRUE) else return(FALSE)
}
isPatternColumn = Vectorize(isPatternColumn)
# Import data
df_av45 = read.csv('dpgmm_alpha12.66_bilateral_AV45_ALL_longdata_slope.csv')
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_patterns = df_av45[pattern_columns]
# demean pattern variables + binary variables
# bin_variables = c('Gender','CORTICAL_SUMMARY_POSITIVE','APOE2_BIN','APOE4_BIN')
# pattern_columns = c()
# for (i in names(df_av45)){
#   if (startsWith(i,'X') | i %in% bin_variables){
#     df_av45[,eval(i)] = (df_av45[,eval(i)] * 2) - 1.0
#   }
# }
# Run PCA
df_patterns.pca = prcomp(df_patterns, center=TRUE, scale.s=TRUE)
df_patterns.pca_rotation = df_patterns.pca$rotation
df_patterns.transformed = predict(df_patterns.pca)
df_av45 = as.data.frame(cbind(as.matrix(df_av45),df_patterns.transformed))
# Convert non factors to floats
to_factor = c('RID','diag_prior','APOE4_BIN','APOE2_BIN','Gender')
for (i in names(df_av45)){
if (!(i %in% to_factor)){
df_av45[,eval(i)] = as.numeric(as.character(df_av45[,eval(i)]))
}
}
# Only keep N/SMC/EMCI/LMCI
valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('EMCI','LMCI')
#valid_diags = c('N','SMC')
#df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
# Only keep negative
df_av45 = df_av45[which(df_av45$CORTICAL_SUMMARY_prior <= threshold),]
df_av45['threshold_dist'] = threshold - df['CORTICAL_SUMMARY_prior']
df_av45['threshold'] = threshold
df_av45['threshold_diff'] = df_av45$threshold - df_av45$CORTICAL_SUMMARY_prior
df_av45['to_threshold'] = df_av45$treshold_diff / df_av45$CORTICAL_SUMMARY_slope
df_av45['to_threshold'] = df_av45$threshold_diff / df_av45$CORTICAL_SUMMARY_slope
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
threshold = 1.15
isPatternColumn = function(i){
if (startsWith(i,'X')) return(TRUE) else return(FALSE)
}
isPatternColumn = Vectorize(isPatternColumn)
# Import data
df_av45 = read.csv('dpgmm_alpha12.66_bilateral_AV45_ALL_longdata_slope.csv')
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_patterns = df_av45[pattern_columns]
# demean pattern variables + binary variables
# bin_variables = c('Gender','CORTICAL_SUMMARY_POSITIVE','APOE2_BIN','APOE4_BIN')
# pattern_columns = c()
# for (i in names(df_av45)){
#   if (startsWith(i,'X') | i %in% bin_variables){
#     df_av45[,eval(i)] = (df_av45[,eval(i)] * 2) - 1.0
#   }
# }
# Run PCA
df_patterns.pca = prcomp(df_patterns, center=TRUE, scale.s=TRUE)
df_patterns.pca_rotation = df_patterns.pca$rotation
df_patterns.transformed = predict(df_patterns.pca)
df_av45 = as.data.frame(cbind(as.matrix(df_av45),df_patterns.transformed))
# Convert non factors to floats
to_factor = c('RID','diag_prior','APOE4_BIN','APOE2_BIN','Gender')
for (i in names(df_av45)){
if (!(i %in% to_factor)){
df_av45[,eval(i)] = as.numeric(as.character(df_av45[,eval(i)]))
}
}
# Only keep N/SMC/EMCI/LMCI
valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('EMCI','LMCI')
#valid_diags = c('N','SMC')
#df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
# Only keep negative
df_av45 = df_av45[which(df_av45$CORTICAL_SUMMARY_prior <= threshold),]
# Calculate time to threshold
df_av45['threshold'] = threshold
df_av45['threshold_diff'] = df_av45$threshold - df_av45$CORTICAL_SUMMARY_prior
df_av45['to_threshold'] = df_av45$threshold_diff / df_av45$CORTICAL_SUMMARY_slope
# Choose valid groups
group_desc = describeBy(df_av45$CORTICAL_SUMMARY_prior,df_av45$group)
# pattern weight models
fm_av45_onlycs = lm(to_threshold ~ CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2), df_av45)
fm_av45_nopattern = lm(to_threshold ~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45 = lm(to_threshold ~ diag_prior +
CORTICAL_SUMMARY_prior*APOE4_BIN +
I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45_onlypatterns = lm(to_threshold ~ diag_prior +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
# summaries
fm_av45_nopattern_summary = summary(fm_av45_nopattern)
fm_av45_summary = summary(fm_av45)
fm_av45_onlypatterns_summary = summary(fm_av45_onlypatterns)
fm_av45_nopattern_summary$adj.r.squared
fm_av45_summary$adj.r.squared
fm_av45_onlypatterns_summary$adj.r.squared
fm_av45_summary
df_av45['to_threshold'][df$to_threshold[df$to_threshold<0]] = 0
df_av45$to_threshold[df$to_threshold<0] = 0
df_av45$to_threshold[df$to_threshold < 0] = 0
df_av45$to_threshold = ifelse(df$to_threshold < 0, 0, df_av45$to_threshold)
df_av45['to_threshold'] = ifelse(df$to_threshold < 0, 0, df_av45$to_threshold)
df_av45['to_threshold']
df_av45['to_threshold'] = ifelse(df$to_threshold < 0, 0, df_av45$to_threshold)
df_av45['to_threshold'] = df_av45$threshold_diff / df_av45$CORTICAL_SUMMARY_slope
df_av45['to_threshold'] = ifelse(df$to_threshold < 0, 0, df_av45$to_threshold)
df_av45['to_threshold'] = ifelse(df['to_threshold'] < 0, 0, df_av45['to_threshold'])
df['to_threshold'] < 0
df_av45[which(df_av45$to_threshold < 0),'to_threshold'] = 0
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
threshold = 1.15
isPatternColumn = function(i){
if (startsWith(i,'X')) return(TRUE) else return(FALSE)
}
isPatternColumn = Vectorize(isPatternColumn)
# Import data
df_av45 = read.csv('dpgmm_alpha12.66_bilateral_AV45_ALL_longdata_slope.csv')
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_patterns = df_av45[pattern_columns]
# demean pattern variables + binary variables
# bin_variables = c('Gender','CORTICAL_SUMMARY_POSITIVE','APOE2_BIN','APOE4_BIN')
# pattern_columns = c()
# for (i in names(df_av45)){
#   if (startsWith(i,'X') | i %in% bin_variables){
#     df_av45[,eval(i)] = (df_av45[,eval(i)] * 2) - 1.0
#   }
# }
# Run PCA
df_patterns.pca = prcomp(df_patterns, center=TRUE, scale.s=TRUE)
df_patterns.pca_rotation = df_patterns.pca$rotation
df_patterns.transformed = predict(df_patterns.pca)
df_av45 = as.data.frame(cbind(as.matrix(df_av45),df_patterns.transformed))
# Convert non factors to floats
to_factor = c('RID','diag_prior','APOE4_BIN','APOE2_BIN','Gender')
for (i in names(df_av45)){
if (!(i %in% to_factor)){
df_av45[,eval(i)] = as.numeric(as.character(df_av45[,eval(i)]))
}
}
# Only keep N/SMC/EMCI/LMCI
valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('EMCI','LMCI')
#valid_diags = c('N','SMC')
#df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
# Only keep negative
df_av45 = df_av45[which(df_av45$CORTICAL_SUMMARY_prior <= threshold),]
# Calculate time to threshold
df_av45['threshold'] = threshold
df_av45['threshold_diff'] = df_av45$threshold - df_av45$CORTICAL_SUMMARY_prior
df_av45['to_threshold'] = df_av45$threshold_diff / df_av45$CORTICAL_SUMMARY_slope
df_av45[which(df_av45$to_threshold < 0),'to_threshold'] = 0
# Choose valid groups
group_desc = describeBy(df_av45$CORTICAL_SUMMARY_prior,df_av45$group)
# pattern weight models
fm_av45_onlycs = lm(to_threshold ~ CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2), df_av45)
fm_av45_nopattern = lm(to_threshold ~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45 = lm(to_threshold ~ diag_prior +
CORTICAL_SUMMARY_prior*APOE4_BIN +
I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45_onlypatterns = lm(to_threshold ~ diag_prior +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
# summaries
fm_av45_nopattern_summary = summary(fm_av45_nopattern)
fm_av45_summary = summary(fm_av45)
fm_av45_onlypatterns_summary = summary(fm_av45_onlypatterns)
fm_av45_nopattern_summary$adj.r.squared
fm_av45_summary$adj.r.squared
fm_av45_onlypatterns_summary$adj.r.squared
fm_av45_summary
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
threshold = 1.15
isPatternColumn = function(i){
if (startsWith(i,'X')) return(TRUE) else return(FALSE)
}
isPatternColumn = Vectorize(isPatternColumn)
# Import data
df_av45 = read.csv('dpgmm_alpha12.66_bilateral_AV45_ALL_longdata_slope.csv')
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_patterns = df_av45[pattern_columns]
# demean pattern variables + binary variables
# bin_variables = c('Gender','CORTICAL_SUMMARY_POSITIVE','APOE2_BIN','APOE4_BIN')
# pattern_columns = c()
# for (i in names(df_av45)){
#   if (startsWith(i,'X') | i %in% bin_variables){
#     df_av45[,eval(i)] = (df_av45[,eval(i)] * 2) - 1.0
#   }
# }
# Run PCA
df_patterns.pca = prcomp(df_patterns, center=TRUE, scale.s=TRUE)
df_patterns.pca_rotation = df_patterns.pca$rotation
df_patterns.transformed = predict(df_patterns.pca)
df_av45 = as.data.frame(cbind(as.matrix(df_av45),df_patterns.transformed))
# Convert non factors to floats
to_factor = c('RID','diag_prior','APOE4_BIN','APOE2_BIN','Gender')
for (i in names(df_av45)){
if (!(i %in% to_factor)){
df_av45[,eval(i)] = as.numeric(as.character(df_av45[,eval(i)]))
}
}
# Only keep N/SMC/EMCI/LMCI
valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('EMCI','LMCI')
#valid_diags = c('N','SMC')
#df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
# Only keep negative
df_av45 = df_av45[which(df_av45$CORTICAL_SUMMARY_prior <= threshold),]
# Calculate time to threshold
df_av45['threshold'] = threshold
df_av45['threshold_diff'] = df_av45$threshold - df_av45$CORTICAL_SUMMARY_prior
df_av45['to_threshold'] = df_av45$threshold_diff / df_av45$CORTICAL_SUMMARY_slope
df_av45[which(df_av45$to_threshold < 0),'to_threshold'] = 0
# Choose valid groups
group_desc = describeBy(df_av45$CORTICAL_SUMMARY_prior,df_av45$group)
# pattern weight models
fm_av45_onlycs = lm(CORTICAL_SUMMARY_slope ~ CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2), df_av45)
fm_av45_nopattern = lm(CORTICAL_SUMMARY_slope ~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45 = lm(CORTICAL_SUMMARY_slope ~ diag_prior +
CORTICAL_SUMMARY_prior*APOE4_BIN +
I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
fm_av45_onlypatterns = lm(CORTICAL_SUMMARY_slope ~ diag_prior +
X0*APOE4_BIN +
X1*APOE4_BIN +
X2*APOE4_BIN +
X3*APOE4_BIN +
X4*APOE4_BIN +
X5*APOE4_BIN +
X7*APOE4_BIN +
X8*APOE4_BIN +
X9*APOE4_BIN +
X10*APOE4_BIN +
X11*APOE4_BIN +
X12*APOE4_BIN +
X14*APOE4_BIN +
X21*APOE4_BIN +
X23*APOE4_BIN +
Age.AV45 + Gender + Edu..Yrs., df_av45)
# summaries
fm_av45_nopattern_summary = summary(fm_av45_nopattern)
fm_av45_summary = summary(fm_av45)
fm_av45_onlypatterns_summary = summary(fm_av45_onlypatterns)
fm_av45_nopattern_summary$adj.r.squared
fm_av45_summary$adj.r.squared
fm_av45_onlypatterns_summary$adj.r.squared
fm_av45_summary
