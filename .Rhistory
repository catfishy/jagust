fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
full_base.anova = anova(fm_full,fm_base)
onlypattern_base.anova = anova(fm_onlypattern,fm_base)
nopattern_base.anova = anova(fm_nopattern,fm_base)
full_base.anova$`Pr(>Chisq)`[2]
onlypattern_base.anova$`Pr(>Chisq)`[2]
nopattern_base.anova$`Pr(>Chisq)`[2]
fm_base.cv = lme.cv(df_long, as.formula(base_form))
fm_nopattern.cv = lme.cv(df_long, as.formula(nopattern_form))
fm_onlypattern.cv = lme.cv(df_long, as.formula(onlypattern_form))
fm_full.cv = lme.cv(df_long, as.formula(full_form))
fm_base.cv
fm_nopattern.cv
fm_onlypattern.cv
fm_full.cv
lme.cv = function(dataset, form) {
k = 20
subjects = levels(as.factor(dataset$RID))
folds = cvFolds(length(subjects), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train_subjects = subjects[folds$subsets[folds$which != i]]
validation_subjects = subjects[folds$subsets[folds$which == i]]
train = dataset[dataset$RID %in% train_subjects,]
validation_indices = dataset$RID %in% validation_subjects
validation = dataset[validation_indices,]
newlm = lmer(as.formula(form),df_long)
newpred = predict(newlm, newdata=validation)
holdoutpred[validation_indices] = newpred
}
responses = dataset[,'value']
rmse(holdoutpred,responses)
}
like.pvalues = lapply(pattern_columns,lme.testvar)
valid_patterns = pattern_columns[like.pvalues <= 0.1]
form.addons = lapply(valid_patterns,lme.addvar)
random_str = '+ (1 + time | RID)'
#diag_prior*time +
base_str = "value ~ Age.AV45 + Gender + Edu..Yrs."
nopattern_str = "value ~ CORTICAL_SUMMARY_prior*time + APOE4_BIN*time + Age.AV45 + Gender + Edu..Yrs."
base_form = paste(base_str,random_str)
nopattern_form = paste(nopattern_str,random_str)
onlypattern_form = paste(base_str,paste(form.addons,collapse=' '),random_str)
full_form = paste(nopattern_str,paste(form.addons,collapse=' '),random_str)
fm_base = lmer(as.formula(base_form),df_long)
fm_nopattern = lmer(as.formula(nopattern_form),df_long)
fm_onlypattern = lmer(as.formula(onlypattern_form),df_long)
fm_full = lmer(as.formula(full_form),df_long)
fm_base.summary = summary(fm_base)
fm_nopattern.summary = summary(fm_nopattern)
fm_onlypattern.summary = summary(fm_onlypattern)
fm_full.summary = summary(fm_full)
fm_base.fit = sem.model.fits(fm_base)
fm_nopattern.fit = sem.model.fits(fm_nopattern)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern)
fm_full.fit = sem.model.fits(fm_full)
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
fm_full.fit
fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
full_base.anova = anova(fm_full,fm_base)
onlypattern_base.anova = anova(fm_onlypattern,fm_base)
nopattern_base.anova = anova(fm_nopattern,fm_base)
full_base.anova$`Pr(>Chisq)`[2]
onlypattern_base.anova$`Pr(>Chisq)`[2]
nopattern_base.anova$`Pr(>Chisq)`[2]
fm_base.cv = lme.cv(df_long, as.formula(base_form))
fm_nopattern.cv = lme.cv(df_long, as.formula(nopattern_form))
fm_onlypattern.cv = lme.cv(df_long, as.formula(onlypattern_form))
fm_full.cv = lme.cv(df_long, as.formula(full_form))
fm_base.cv
fm_nopattern.cv
fm_onlypattern.cv
fm_full.cv
valid_patterns
fm_onlypattern.summary
lme.cv = function(dataset, form) {
k = 40
subjects = levels(as.factor(dataset$RID))
folds = cvFolds(length(subjects), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train_subjects = subjects[folds$subsets[folds$which != i]]
validation_subjects = subjects[folds$subsets[folds$which == i]]
train = dataset[dataset$RID %in% train_subjects,]
validation_indices = dataset$RID %in% validation_subjects
validation = dataset[validation_indices,]
newlm = lmer(as.formula(form),df_long)
newpred = predict(newlm, newdata=validation)
holdoutpred[validation_indices] = newpred
}
responses = dataset[,'value']
rmse(holdoutpred,responses)
}
fm_base.cv = lme.cv(df_long, as.formula(base_form))
fm_nopattern.cv = lme.cv(df_long, as.formula(nopattern_form))
fm_onlypattern.cv = lme.cv(df_long, as.formula(onlypattern_form))
fm_full.cv = lme.cv(df_long, as.formula(full_form))
fm_base.cv
fm_nopattern.cv
fm_onlypattern.cv
fm_full.cv
form
form = as.formula(onlypattern_form)
dataset = df_long
k = 40
subjects = levels(as.factor(dataset$RID))
folds = cvFolds(length(subjects), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train_subjects = subjects[folds$subsets[folds$which != i]]
validation_subjects = subjects[folds$subsets[folds$which == i]]
train = dataset[dataset$RID %in% train_subjects,]
validation_indices = dataset$RID %in% validation_subjects
validation = dataset[validation_indices,]
newlm = lmer(as.formula(form),df_long)
newpred = predict(newlm, newdata=validation)
holdoutpred[validation_indices] = newpred
}
responses = dataset[,'value']
rmse(holdoutpred,responses)
plot(responses,holdoutpred)
round(holdoutpred)
plot(responses,round(holdoutpred))
lme.cv = function(dataset, form) {
k = 20
subjects = levels(as.factor(dataset$RID))
folds = cvFolds(length(subjects), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train_subjects = subjects[folds$subsets[folds$which != i]]
validation_subjects = subjects[folds$subsets[folds$which == i]]
train = dataset[dataset$RID %in% train_subjects,]
validation_indices = dataset$RID %in% validation_subjects
validation = dataset[validation_indices,]
newlm = lmer(as.formula(form),df_long)
newpred = predict(newlm, newdata=validation)
holdoutpred[validation_indices] = newpred
}
responses = dataset[,'value']
rmse(holdoutpred,round(responses))
}
fm_base.cv = lme.cv(df_long, as.formula(base_form))
fm_nopattern.cv = lme.cv(df_long, as.formula(nopattern_form))
fm_onlypattern.cv = lme.cv(df_long, as.formula(onlypattern_form))
fm_full.cv = lme.cv(df_long, as.formula(full_form))
fm_base.cv
fm_nopattern.cv
fm_onlypattern.cv
fm_full.cv
base_form
onlypattern_form
fm_onlypattern.summary
fm_base.summary
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
# # Calculate time to positivity threshold
# df_av45['threshold'] = threshold
# df_av45['threshold_diff'] = df_av45$threshold - df_av45$CORTICAL_SUMMARY_prior
# df_av45['to_threshold'] = df_av45$threshold_diff / df_av45$CORTICAL_SUMMARY_slope
# df_av45[which(df_av45$to_threshold < 0),'to_threshold'] = 0
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender','Diag.AV45_long','positive_prior','positive_post')
to_standardize = c('CORTICAL_SUMMARY_change','CORTICAL_SUMMARY_prior','CORTICAL_SUMMARY_post','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','diag_prior','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_change','CORTICAL_SUMMARY_prior','CORTICAL_SUMMARY_post','positive_prior','positive_post')
target = "CORTICAL_SUMMARY_change"
#target = 'UCB_FS_HC.ICV_slope'
#target = 'diag_prior'
all_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI','AD')
valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
time_col_prefix = 'TIMEpostAV45_ADAS'
value_col_prefix = 'ADAScog'
#time_col_prefix = 'TIMEpostAV45_AVLT.'
#value_col_prefix = 'AVLT.'
# FUNCTIONS
isPatternColumn = function(i){
if (startsWith(i,pattern_prefix)) return(TRUE) else return(FALSE)
}
isPatternColumn = Vectorize(isPatternColumn)
lm.addvar = function(var.name) {
paste('+',paste(var.name,'*','APOE4_BIN',sep=''))
}
lme.addvar = function(var.name) {
paste('+',paste(var.name,'*','time',sep=''))
}
plot.model = function(model) {
plot(model)
}
fm.relimp = function(model) {
calc.relimp(model, type=c('lmg'), rela=TRUE)
}
rmse = function(m, o) {
sqrt(mean((m-o)^2))
}
to.long = function(df, time_col_prefix, value_col_prefix) {
# Keep relevant columns
time_columns = Filter(function(i){startsWith(i,time_col_prefix)}, names(df))
value_columns = Filter(function(i){startsWith(i,value_col_prefix)}, names(df))
df = df[c(demog_columns,av45_columns,pattern_columns,time_columns,value_columns)]
# Convert to long format
df_time_wide = df[c(demog_columns,av45_columns,pattern_columns,time_columns)]
colnames(df_time_wide) = gsub(time_col_prefix,'TP',names(df_time_wide))
df_value_wide = df[c(demog_columns,av45_columns,pattern_columns,value_columns)]
colnames(df_value_wide) = gsub(value_col_prefix,'TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=c(demog_columns,av45_columns,pattern_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=c(demog_columns,av45_columns,pattern_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demog_columns,av45_columns,pattern_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
df_long[complete.cases(df_long[,names(df_long)]),]
}
# IMPORT
df_av45 = read.csv('pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
df_av45 = df_av45[which(df_av45$diag_post %in% all_diags),]
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_long = to.long(df_av45, time_col_prefix, value_col_prefix)
# One by one pattern variable likelihood testing
mlm.testvar = function(var.name) {
#CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
base_str = paste(target,"~","CORTICAL_SUMMARY_prior*APOE4_BIN + positive_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
add_str = lm.addvar(var.name)
form_base = as.formula(base_str)
form = as.formula(paste(base_str,add_str))
fm = multinom(form,data=df_av45)
fm_base = multinom(form_base,data=df_av45)
like = anova(fm_base,fm)
like.p = like$`Pr(Chi)`[2]
}
mlm.cv = function(dataset, form, target) {
k = 20
folds = cvFolds(nrow(dataset), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train = dataset[folds$subsets[folds$which != i],]
validation = dataset[folds$subsets[folds$which == i],]
newlm =  multinom(form,data=train)
newpred = predict(newlm, newdata=validation)
holdoutpred[folds$subsets[folds$which ==i]] = newpred
}
responses = as.numeric(dataset[,eval(target)])
# find accuracy
ctab = xtabs(~ diag_prior + holdoutpred, data=dataset)
sum(diag(ctab))/sum(ctab)
}
lme.testvar = function(var.name) {
#diag_prior*time +
base_str = paste('value',"~","CORTICAL_SUMMARY_prior*time + APOE4_BIN*time + Age.AV45 + Gender + Edu..Yrs.")
add_str = lme.addvar(var.name)
random_str = '+ (1 + time | RID)'
form_base = as.formula(paste(base_str,random_str))
form = as.formula(paste(base_str,add_str,random_str))
fm = lmer(form,data=df_long)
fm_base = lmer(form_base,df_long)
like = anova(fm_base,fm)
like.p = like$`Pr(>Chisq)`[2]
}
lme.cv = function(dataset, form) {
k = 20
subjects = levels(as.factor(dataset$RID))
folds = cvFolds(length(subjects), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train_subjects = subjects[folds$subsets[folds$which != i]]
validation_subjects = subjects[folds$subsets[folds$which == i]]
train = dataset[dataset$RID %in% train_subjects,]
validation_indices = dataset$RID %in% validation_subjects
validation = dataset[validation_indices,]
newlm = lmer(as.formula(form),df_long)
newpred = predict(newlm, newdata=validation)
holdoutpred[validation_indices] = newpred
}
responses = dataset[,'value']
rmse(holdoutpred,round(responses))
}
lm.testvar = function(var.name) {
base_str = paste(target,"~","CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + diag_prior + Age.AV45 + Gender + Edu..Yrs.")
add_str = lm.addvar(var.name)
form_base = as.formula(base_str)
form = as.formula(paste(base_str,add_str))
fm = lm(form,data=df_av45)
fm_base = lm(form_base,data=df_av45)
like = anova(fm_base,fm)
like.p = like$`Pr(>F)`[2]
}
make_norm = function(response) {
mod.Lh <- MLE_LambertW(response, distname = "normal", type = "hh")
response.trans = get_input(mod.Lh)
test_norm(response.trans)
response.trans
}
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = lapply(pattern_columns,lm.testvar)
valid_patterns = pattern_columns[like.pvalues <= 0.1]
form.addons = lapply(valid_patterns,lm.addvar)
base_form = paste(target,"~ diag_prior + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(form.addons,collapse=' '))
full_form = paste(nopattern_form,paste(form.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_base.summary = summary(fm_base)
fm_nopattern.summary = summary(fm_nopattern)
fm_onlypattern.summary = summary(fm_onlypattern)
fm_full.summary = summary(fm_full)
fm_base.summary$adj.r.squared
fm_nopattern.summary$adj.r.squared
fm_onlypattern.summary$adj.r.squared
fm_full.summary$adj.r.squared
fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
fm_full.cv = cv.lm(data=df_av45,form.lm=fm_full, m=20, printit=FALSE)
fm_base.cv = cv.lm(data=df_av45,form.lm=fm_base, m=20, printit=FALSE)
fm_nopattern.cv = cv.lm(data=df_av45,form.lm=fm_nopattern, m=20, printit=FALSE)
fm_onlypattern.cv = cv.lm(data=df_av45,form.lm=fm_onlypattern, m=20, printit=FALSE)
attributes(fm_full.cv)$ms
attributes(fm_onlypattern.cv)$ms
attributes(fm_nopattern.cv)$ms
attributes(fm_base.cv)$ms
valid_patterns
fm_onlypattern.summary
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = lapply(pattern_columns,lm.testvar)
valid_patterns = pattern_columns[like.pvalues <= 0.05]
form.addons = lapply(valid_patterns,lm.addvar)
base_form = paste(target,"~ diag_prior + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(form.addons,collapse=' '))
full_form = paste(nopattern_form,paste(form.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_base.summary = summary(fm_base)
fm_nopattern.summary = summary(fm_nopattern)
fm_onlypattern.summary = summary(fm_onlypattern)
fm_full.summary = summary(fm_full)
fm_base.summary$adj.r.squared
fm_nopattern.summary$adj.r.squared
fm_onlypattern.summary$adj.r.squared
fm_full.summary$adj.r.squared
fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
fm_full.cv = cv.lm(data=df_av45,form.lm=fm_full, m=20, printit=FALSE)
fm_base.cv = cv.lm(data=df_av45,form.lm=fm_base, m=20, printit=FALSE)
fm_nopattern.cv = cv.lm(data=df_av45,form.lm=fm_nopattern, m=20, printit=FALSE)
fm_onlypattern.cv = cv.lm(data=df_av45,form.lm=fm_onlypattern, m=20, printit=FALSE)
attributes(fm_full.cv)$ms
attributes(fm_onlypattern.cv)$ms
attributes(fm_nopattern.cv)$ms
attributes(fm_base.cv)$ms
valid_patterns
pattern_columns
length(pattern_columns)
corr_pvalue = 0.05/length(pattern_columns)
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = lapply(pattern_columns,lm.testvar)
corr_pvalue = 0.05/length(pattern_columns)
valid_patterns = pattern_columns[like.pvalues <= corr_pvalue]
valid_patterns
min(like.pvalues)
like.pvalues
p.adjust(like.pvalues)
p.adjust(like.pvalues,method='holm')
p.adjust(like.pvalues,method='BY')
p.adjust(like.pvalues,method='hommel')
p.adjust(like.pvalues,method='hochberg')
p.adjust(like.pvalues,method='BH')
like.pvalues
c(like.pvalues)
c(like.pvalues)
array(like.pvalues)
list(like.pvalues)
unlist(list.pvalues)
unlist(like.pvalues)
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = unlist(lapply(pattern_columns,lm.testvar))
p.adjust(like.pvalues)
p.adjust(like.pvalues,method='fdr')
p.adjust(like.pvalues,method='hom')
p.adjust(like.pvalues,method='holm')
p.adjust(like.pvalues,method='bonferroni')
p.adjust(like.pvalues,method='holm')
p.adjust(like.pvalues,method='hochberg')
p.adjust(like.pvalues,method='hommel')
p.adjust(like.pvalues,method='BH')
p.adjust(like.pvalues,method='BY')
p.adjust(like.pvalues,method=None)
p.adjust(like.pvalues,method=none)
p.adjust(like.pvalues,method='none')
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = lapply(pattern_columns,lm.testvar)
valid_patterns = pattern_columns[like.pvalues <= 0.05]
form.addons = lapply(valid_patterns,lm.addvar)
base_form = paste(target,"~ diag_prior + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(form.addons,collapse=' '))
full_form = paste(nopattern_form,paste(form.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_base.summary = summary(fm_base)
fm_nopattern.summary = summary(fm_nopattern)
fm_onlypattern.summary = summary(fm_onlypattern)
fm_full.summary = summary(fm_full)
fm_base.summary$adj.r.squared
fm_nopattern.summary$adj.r.squared
fm_onlypattern.summary$adj.r.squared
fm_full.summary$adj.r.squared
fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
fm_full.cv = cv.lm(data=df_av45,form.lm=fm_full, m=10, printit=FALSE)
fm_base.cv = cv.lm(data=df_av45,form.lm=fm_base, m=10, printit=FALSE)
fm_nopattern.cv = cv.lm(data=df_av45,form.lm=fm_nopattern, m=10, printit=FALSE)
fm_onlypattern.cv = cv.lm(data=df_av45,form.lm=fm_onlypattern, m=10, printit=FALSE)
attributes(fm_full.cv)$ms
attributes(fm_onlypattern.cv)$ms
attributes(fm_nopattern.cv)$ms
attributes(fm_base.cv)$ms
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
fm_full.cv = cv.lm(data=df_av45,form.lm=fm_full, m=10, printit=FALSE)
fm_base.cv = cv.lm(data=df_av45,form.lm=fm_base, m=10, printit=FALSE)
fm_nopattern.cv = cv.lm(data=df_av45,form.lm=fm_nopattern, m=10, printit=FALSE)
fm_onlypattern.cv = cv.lm(data=df_av45,form.lm=fm_onlypattern, m=10, printit=FALSE)
attributes(fm_full.cv)$ms
attributes(fm_onlypattern.cv)$ms
attributes(fm_nopattern.cv)$ms
attributes(fm_base.cv)$ms
