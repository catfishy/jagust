df_value_long = melt(df_value_wide,
id.vars=c(demog_columns,av45_columns,pattern_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demog_columns,av45_columns,pattern_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
df_long[complete.cases(df_long[,names(df_long)]),]
}
# IMPORT
df_av45 = read.csv('pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$diag_prior %in% valid_diags),]
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
df_long = to.long(df_av45, time_col_prefix, value_col_prefix)
# One by one pattern variable likelihood testing
mlm.testvar = function(var.name) {
#CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
#CORTICAL_SUMMARY_prior*APOE4_BIN + positive_prior*APOE4_BIN
base_str = paste(target,"~","APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
add_str = lm.addvar(var.name)
form_base = as.formula(base_str)
form = as.formula(paste(base_str,add_str))
fm = vglm(as.formula(form), family=multinomial(refLevel=1), data=df_av45)
fm_base = vglm(as.formula(form_base), family=multinomial(refLevel=1), data=df_av45)
like = VGAM::lrtest(fm, fm_base)
like.p = like@Body$`Pr(>Chisq)`[2]
}
mlm.cv = function(dataset, form, target) {
k = 10
folds = cvFolds(nrow(dataset), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train = dataset[folds$subsets[folds$which != i],]
validation = dataset[folds$subsets[folds$which == i],]
newlm = vglm(form, family=multinomial(refLevel=1), data=train)
newprobs = VGAM::predict(newlm, validation, type='response')
if (is.null(colnames(newprobs))) {
newpred = apply(newprobs,1,which.max)
} else {
newpred = colnames(newprobs)[apply(newprobs,1,which.max)]
}
holdoutpred[folds$subsets[folds$which ==i]] = newpred
}
responses = as.numeric(dataset[,eval(target)])
# find accuracy
ctab = xtabs(as.formula(paste('~',target,'+ holdoutpred')), data=dataset)
sum(diag(ctab))/sum(ctab)
}
lme.testvar = function(var.name) {
#diag_prior*time + CORTICAL_SUMMARY_prior*time +
base_str = paste('value',"~","APOE4_BIN*time + Age.AV45 + Gender + Edu..Yrs.")
add_str = lme.addvar(var.name)
random_str = '+ (1 + time | RID)'
form_base = as.formula(paste(base_str,random_str))
form = as.formula(paste(base_str,add_str,random_str))
fm = lmer(form,data=df_long)
fm_base = lmer(form_base,df_long)
like = anova(fm_base,fm)
like.p = like$`Pr(>Chisq)`[2]
}
lme.cv = function(dataset, form) {
k = 20
subjects = levels(as.factor(dataset$RID))
folds = cvFolds(length(subjects), K=k)
holdoutpred = rep(0,nrow(dataset))
for (i in 1:k) {
train_subjects = subjects[folds$subsets[folds$which != i]]
validation_subjects = subjects[folds$subsets[folds$which == i]]
train = dataset[dataset$RID %in% train_subjects,]
validation_indices = dataset$RID %in% validation_subjects
validation = dataset[validation_indices,]
newlm = lmer(as.formula(form),df_long)
newpred = predict(newlm, newdata=validation)
holdoutpred[validation_indices] = newpred
}
responses = dataset[,'value']
rmse(holdoutpred,round(responses))
}
lm.testvar = function(var.name) {
# CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN +
base_str = paste(target,"~","diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
add_str = lm.addvar(var.name)
form_base = as.formula(base_str)
form = as.formula(paste(base_str,add_str))
fm = lm(form,data=df_av45)
fm_base = lm(form_base,data=df_av45)
like = anova(fm_base,fm)
like.p = like$`Pr(>F)`[2]
}
make_norm = function(response) {
mod.Lh <- MLE_LambertW(response, distname = "normal", type = "hh")
response.trans = get_input(mod.Lh)
test_norm(response.trans)
response.trans
}
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = lapply(pattern_columns,lm.testvar)
valid_patterns = pattern_columns[like.pvalues <= 0.05]
form.addons = lapply(valid_patterns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(form.addons,collapse=' '))
full_form = paste(nopattern_form,paste(form.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_base.summary = summary(fm_base)
fm_nopattern.summary = summary(fm_nopattern)
fm_onlypattern.summary = summary(fm_onlypattern)
fm_full.summary = summary(fm_full)
fm_base.fit = sem.model.fits(fm_base)
fm_nopattern.fit = sem.model.fits(fm_nopattern)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern)
fm_full.fit = sem.model.fits(fm_full)
fm_base.anova = Anova(fm_base,type='III')
fm_nopattern.anova = Anova(fm_nopattern,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern,type='III')
fm_full.anova = Anova(fm_full,type='III')
fm_full.cv = cv.lm(data=df_av45,form.lm=fm_full, m=20, printit=FALSE)
fm_base.cv = cv.lm(data=df_av45,form.lm=fm_base, m=20, printit=FALSE)
fm_nopattern.cv = cv.lm(data=df_av45,form.lm=fm_nopattern, m=20, printit=FALSE)
fm_onlypattern.cv = cv.lm(data=df_av45,form.lm=fm_onlypattern, m=20, printit=FALSE)
attributes(fm_full.cv)$ms
attributes(fm_onlypattern.cv)$ms
attributes(fm_nopattern.cv)$ms
attributes(fm_base.cv)$ms
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
fm_full.fit
fm_base.summary$adj.r.squared
fm_nopattern.summary$adj.r.squared
fm_onlypattern.summary$adj.r.squared
fm_full.summary$adj.r.squared
base_form
nopattern_form
onlypattern_form
full_form
anova(fm_full,fm_base)
anova(fm_onlypattern,fm_base)
anova(fm_nopattern,fm_base)
valid_patterns
avPlots(fm_onlypattern, id.n=2, id.cex=0.7)
fm_onlypattern.summary
pattern_columns
df_av45[,pattern_columns]
cor(df_av45[,pattern_columns])
findCorrelation(cor(df_av45[,pattern_columns]))
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.5)
onlypattern_form
all.addons = lapply(pattern_columns,lm.addvar)
allpattern_form = paste(base_form,paste(all.addons,collapse=' '))
allpattern_form
control = trainControl(method='repeatedcv', number=10, repeats=3)
model = train(as.formula(allpattern_form), data=df_av45, method='lvq', preProcess='scale', trControl=control)
library(leaps)
install.packages('leaps')
library(leaps)
subs = regsubsets(allpattern_form,data=df_av45)
allpattern_form
subs = regsubsets(as.formula(allpattern_form),data=df_av45)
ctrl = rfeControl(functions)
lmFuncs
fm_base$effects
fm_base$assign
fm_base$contrasts
fm_base$terms
fm_base$model
fm_all = lm(as.formula(allpattern_form),dv_av45)
fm_all = lm(as.formula(allpattern_form),df_av45)
summary(fm_all)
fm_all$model
lmFit = train(as.formula(allpattern_form), data=df_av45, "lmStepAIC", direction="forward")
lmFit
lmFit$results
lmFit$bestTune
lmFit$finalModel
lmFit = train(as.formula(allpattern_form), data=df_av45, "foba", direction="forward")
lmFit = train(as.formula(allpattern_form), data=df_av45, method="foba", direction="forward")
warnings()
lmFit = train(as.formula(allpattern_form), data=df_av45, method="foba")
lmFit
lmFit$finalModel
summary(lmFit$finalModel)
summary(lmFit)
lmFit$finalModel
anova(lmFit$finalModel)
trControl = trainControl(method = 'LGOCV', number = 10)
params = expand.grid(alpha=c(0,0.5,1),lambda=2^seq(1,-10, by=-0.3))
lmFit = train(as.formula(allpattern_form), data=df_av45, method="glmnet")
trControl = trainControl(method = 'LGOCV', number = 10)
params = expand.grid(alpha=c(0,0.5,1),lambda=2^seq(1,-10, by=-0.3))
lmFit = train(as.formula(allpattern_form), data=df_av45, method="glmnet")
lmFit
2^seq(1,-10, by=-0.3)
lmFit$finalModel
summary(lmFit$finalModel)
params
lmFit
plot(lmFit,xTrans=log)
plot(lmFit$finalModel,xvar='lambda')
lmFit$finalModel$call
lmFit$finalModel$df
anova(lmFit$finalModele)
anova(lmFit$finalModel)
plot(lmFit)
plot(lmFit$finalModel)
lmFit$finalModel$lambda
lmFit$modelInfo
lmFit$finalModel$beta
lmFit$finalModel$df
lmFit$finalModel$dev.ratio
lmFit$finalModel$lambdaOpt
trControl = trainControl(method = 'LGOCV', number = 10)
params = expand.grid(alpha=seq(0,1,by=0.1),lambda=2^seq(1,-10, by=-0.3))
lmFit = train(as.formula(allpattern_form), data=df_av45, method="glmnet")
lmFit
seq(0,1,by=0.1)
lmFit$coefnames
lmFit$finalModel
lmFit$finalModel$a0
fm_all
step = stepAIC(fm_all)
step = stepAIC(fm_all, direction='both')
step$anova
step$model
step$anova
step$coefficients
step$fitted.values
summary(step)
step
step = stepAIC(fm_all, direction='both')
step
step
?stepAIC
sem.model.fits(fm_onlypattern)
sem.model.fits(fm_full)
sem.model.fits(step)
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
all.addons = lapply(pattern_columns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
full_form = paste(nopattern_form,paste(all.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_base.step = stepAIC(fm_base, direction='both')
fm_nopattern.step = stepAIC(fm_nopattern, direction='both')
fm_onlypattern.step = stepAIC(fm_onlypattern, direction='both')
fm_full.step = stepAIC(fm_full, direction='both')
fm_base.fit = sem.model.fits(fm_base.step)
fm_nopattern.fit = sem.model.fits(fm_nopattern.step)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern.step)
fm_full.fit = sem.model.fits(fm_full.step)
fm_base.fit
fm_nopattern.fit
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
fm_full.fit
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
like.pvalues = lapply(pattern_columns,lm.testvar)
valid_patterns = pattern_columns[like.pvalues <= 0.05]
form.addons = lapply(valid_patterns,lm.addvar)
all.addons = lapply(pattern_columns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(form.addons,collapse=' '))
full_form = paste(nopattern_form,paste(form.addons,collapse=' '))
allpattern_form = paste(base_form,paste(all.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_all = lm(as.formula(allpattern_form),df_av45)
fm_base.summary = summary(fm_base)
fm_nopattern.summary = summary(fm_nopattern)
fm_onlypattern.summary = summary(fm_onlypattern)
fm_full.summary = summary(fm_full)
fm_base.fit = sem.model.fits(fm_base)
fm_nopattern.fit = sem.model.fits(fm_nopattern)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern)
fm_full.fit = sem.model.fits(fm_full)
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
fm_full.fit
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
all.addons = lapply(pattern_columns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
full_form = paste(nopattern_form,paste(all.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_full = lm(as.formula(full_form),df_av45)
fm_base.step = stepAIC(fm_base, direction='both')
fm_nopattern.step = stepAIC(fm_nopattern, direction='both')
fm_onlypattern.step = stepAIC(fm_onlypattern, direction='both')
fm_full.step = stepAIC(fm_full, direction='both')
fm_base.fit = sem.model.fits(fm_base.step)
fm_nopattern.fit = sem.model.fits(fm_nopattern.step)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern.step)
fm_full.fit = sem.model.fits(fm_full.step)
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
fm_full.fit
fm_base.step
fm_nopattern.step
fm_onlypattern.step
fm_full.step
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
all.addons = lapply(pattern_columns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_base.step = stepAIC(fm_base, direction='both')
fm_nopattern.step = stepAIC(fm_nopattern, direction='both')
fm_onlypattern.step = stepAIC(fm_onlypattern, direction='both')
fm_base.fit = sem.model.fits(fm_base.step)
fm_nopattern.fit = sem.model.fits(fm_nopattern.step)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern.step)
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
anova(fm_nopattern,fm_base)
anova(fm_onlypattern,fm_base)
anova(fm_nopattern.step,fm_base)
anova(fm_onlypattern.step,fm_base)
anova(fm_onlypattern.step,fm_base.step)
anova(fm_nopattern.step,fm_base.step)
anova(fm_onlypattern.step,fm_base.step)
fm_base.step
fm_nopattern.step
fm_onlypattern.step
anova(fm_onlypattern.step,fm_nopattern.step)
anova(fm_nopattern.step,fm_onlypattern.step)
AIC(fm_onlypattern.step)
AIC(fm_onlypattern)
AIC(fm_nopattern.step)
AIC(fm_nopattern)
summary(fm_onlypattern.step)
avPlots(fm_onlypattrn.step, id.n=2, id.cex=0.7)
avPlots(fm_onlypattern.step, id.n=2, id.cex=0.7)
summary(fm_nopattern.step)
anova(fm_nopattern.step)
Anova(fm_nopattern.step, type='III')
fm_base
fm_base.step
fm_nopattern.step
fm_onlypattern.step
?stepAIC
plot(fm_onlypattern.step$fitted.values)
plot(fm_onlypattern.step$fitted.values,df_av45[target])
plot(fm_onlypattern.step$fitted.values,df_av45[,target])
plot(df_av45[,target],fm_onlypattern.step$fitted.values)
plot(fm_base.step)
plot(fm_onlypattern.step)
df_av45[,eval(target)] = make_norm(df_av45[,eval(target)])
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
all.addons = lapply(pattern_columns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
fm_base.step = stepAIC(fm_base, direction='both')
fm_nopattern.step = stepAIC(fm_nopattern, direction='both')
fm_onlypattern.step = stepAIC(fm_onlypattern, direction='both')
fm_base.fit = sem.model.fits(fm_base.step)
fm_nopattern.fit = sem.model.fits(fm_nopattern.step)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern.step)
fm_base.anova = Anova(fm_base.step,type='III')
fm_nopattern.anova = Anova(fm_nopattern.step,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern.step,type='III')
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
anova(fm_nopattern.step,fm_base.step)
anova(fm_onlypattern.step,fm_base.step)
plot(fm_base.step)
plot(fm_nopattern.step)
plot(fm_onlypattern.step)
plot(fm_base.step)
title("Only Pattern Model", outer=T, line=-2)
par(mfrom=c(2,2))
plot(fm_base.step)
title("Only Pattern Model", outer=T, line=-2)
par(mfrow=c(2,2))
plot(fm_base.step)
title("Base Model", outer=T, line=-2)
plot(fm_nopattern.step)
title("No Pattern Model", outer=T, line=-2)
plot(fm_onlypattern.step)
title("Only Pattern Model", outer=T, line=-2)
fm_onlypattern.step
fm_nopattern.step
fm_base.step
onlypattern_form
trControl = trainControl(method = 'LGOCV', number = 10)
params = expand.grid(alpha=seq(0,1,by=0.1),lambda=2^seq(1,-10, by=-0.3))
lmFit = train(as.formula(onlypattern_form), data=df_av45, method="glmnet")
lmFit
lmFit$finalModel
plot(lmFit$finalModel)
findCorrelation(cor(df_av45[,pattern_columns]))
?findCorrelation
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.9)
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.0)
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.1)
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.2)
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.3)
findCorrelation(cor(df_av45[,pattern_columns]),cutoff=0.25)
trControl = trainControl(method = 'LGOCV', number = 10)
params = expand.grid(alpha=seq(0,1,by=0.1),lambda=2^seq(1,-10, by=-0.3))
lmFit = train(as.formula(onlypattern_form), data=df_av45, method="glmnet")
avPlots(lmFit)
avPlots(lmFit$finalModel)
?trainControl
lmFit
?train
lmFit = train(as.formula(onlypattern_form), data=df_av45, method="glmnet", trControl=trControl, tuneGrid=params)
lmFit
2^seq(1,-10, by=-0.3)
lmFit$modelInfo
lmFit$modelType
lmFit$finalModel
type(lmFit$finalModel)
typeof(lmFit$finalModel)
final.model = lmFit$finalModel
lmFit$results
lmFit = train(as.formulat(onlypattern_form), data=df_av45, method='lm', trControl=trControl)
lmFit = train(as.formula(onlypattern_form), data=df_av45, method='lm', trControl=trControl)
lmFit
lmFit$results
lmFit$finalModel
trControl = trainControl(method = 'LGOCV', number = 10)
params = expand.grid(alpha=seq(0,1,by=0.1),lambda=2^seq(1,-10, by=-0.3))
lmFit = train(as.formula(onlypattern_form), data=df_av45, method="glmnet", trControl=trControl, tuneGrid=params)
coef(lmFit$finalModel)
coef(lmFit$finalModel,s=0.1)
lmFit$finalModel$lambda
lmFit$finalModel$lambdaOpt
coef(lmFit$finalModel,s=lmFit$finalModel$lambdaOpt)
lmFit = train(as.formula(onlypattern_form), data=df_av45, method='lmStepAIC', trControl=trControl)
lmFit
lmFit$finalModel
onlypattern_form
summary(lmFit$finalModel)
lmFit$results
AIC(lmFit$finalModel)
AIC(fm_onlypattern)
df_av45[,eval(target)] = make_norm(df_av45[,eval(target)])
non.na = complete.cases(df_av45[,c(target,demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
all.addons = lapply(pattern_columns,lm.addvar)
base_form = paste(target,"~ diag_prior*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
nopattern_form = paste(target,"~ diag_prior*APOE4_BIN + CORTICAL_SUMMARY_prior*APOE4_BIN + I(CORTICAL_SUMMARY_prior^2)*APOE4_BIN + Age.AV45 + Gender + Edu..Yrs.")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
fm_base = lm(as.formula(base_form),data=df_av45)
fm_nopattern = lm(as.formula(nopattern_form),df_av45)
fm_onlypattern = lm(as.formula(onlypattern_form),df_av45)
trControl = trainControl(method = 'LGOCV', number = 10)
fm_base.lmfit = train(as.formula(base_form), data=df_av45, method='lmStepAIC', trControl=trControl)
fm_nopattern.lmfit = train(as.formula(onlypattern_form), data=df_av45, method='lmStepAIC', trControl=trControl)
fm_onlypattern.lmfit = train(as.formula(nopattern_form), data=df_av45, method='lmStepAIC', trControl=trControl)
fm_base.step = fm_base$finalModel
fm_nopattern.step = fm_nopattern$finalModel
fm_onlypattern.step = fm_onlypattern$finalModel
fm_base.fit = sem.model.fits(fm_base.step)
fm_nopattern.fit = sem.model.fits(fm_nopattern.step)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern.step)
fm_base.anova = Anova(fm_base.step,type='III')
fm_nopattern.anova = Anova(fm_nopattern.step,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern.step,type='III')
fm_base.step
fm_base.step = fm_base.lmfit$finalModel
fm_nopattern.step = fm_nopattern.lmfit$finalModel
fm_onlypattern.step = fm_onlypattern.lmfit$finalModel
fm_base.fit = sem.model.fits(fm_base.step)
fm_nopattern.fit = sem.model.fits(fm_nopattern.step)
fm_onlypattern.fit = sem.model.fits(fm_onlypattern.step)
fm_base.anova = Anova(fm_base.step,type='III')
fm_nopattern.anova = Anova(fm_nopattern.step,type='III')
fm_onlypattern.anova = Anova(fm_onlypattern.step,type='III')
fm_base.fit
fm_nopattern.fit
fm_onlypattern.fit
anova(fm_nopattern.step,fm_base.step)
anova(fm_onlypattern.step,fm_base.step)
fm_nopattern.summary
fm_nopattern.anova
