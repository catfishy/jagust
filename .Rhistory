#value_col_prefix = 'AVLT.'
#time_col_prefix = 'WMH_postAV45.'
#value_col_prefix = 'WMH_percentOfICV.'
time_col_prefix = 'UW_EF_postAV45_'
value_col_prefix = 'UW_EF_'
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
non.na = complete.cases(df_av45[,c(demog_columns,av45_columns,target)])
df_av45 = df_av45[non.na,]
# filter by diag or postivity
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
df_av45 = df_av45[which(df_av45[,'AV45_NONTP_wcereb_BIN1.11'] == positive_value),]
# make factors
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
naive_columns = Filter(isNaiveColumn,names(df_av45))
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av45, aes_string(pcol, colour = 'positive_prior')) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,target)
cross_normalization = preProcess(df_av45[,cross_to_standardize])
df_av45[,cross_to_standardize] = predict(cross_normalization, df_av45[,cross_to_standardize])
# long_to_standardize = c(to_standardize,pattern_columns,'time','value')
# long_normalization = preProcess(df_long[,long_to_standardize])
# df_long[,long_to_standardize] = predict(long_normalization, df_long[,long_to_standardize])
# # Create long dataset
# df_long = to.long(df_av45, time_col_prefix, value_col_prefix)
# df_long$value = Gaussianize(df_long$value, type='hh', method='MLE', return.u=TRUE)
# make response normal
#df_av45[,eval(target)] = Gaussianize(df_av45[,eval(target)], type='hh', method='MLE', return.u=TRUE)
#all.addons = lapply(pattern_columns,lm.addvar)
#naive.addons = lapply(naive_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
addons_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
diag_counts = table(df_av45$Diag.AV45)
if (length((diag_counts[diag_counts>0])) > 1) {
diag_str = 'Diag.AV45 + '
} else {
diag_str = ''
}
base_form = paste(target,"~",diag_str,"Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
nopattern_form = paste(target,"~",diag_str,"CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2) + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
full_form = paste(nopattern_form,paste(all.addons,collapse=' '))
naive_form = paste(base_form,paste(naive.addons,collapse=' '))
# LARS lasso
nopattern_x = getxy(nopattern_form,df_av45)
y = as.numeric(df_av45[,target])
nopattern.lars.model = lars(nopattern_x,y,type='lasso')
nopattern.lars.test = covTest(nopattern.lars.model,nopattern_x,y)$results
nopattern.lars.sigcoef.idx = nopattern.lars.test[nopattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
nopattern.lars.coef = coef(nopattern.lars.model, s=which.min(summary(nopattern.lars.model)$Cp), mode='step')
nopattern.lars.sigcoef = nopattern.lars.coef[nopattern.lars.sigcoef.idx]
onlypattern_x = getxy(onlypattern_form,df_av45)
y = as.numeric(df_av45[,target])
onlypattern.lars.model = lars(onlypattern_x,y,type='lasso')
onlypattern.lars.test = covTest(onlypattern.lars.model,onlypattern_x,y)$results
onlypattern.lars.sigcoef.idx = onlypattern.lars.test[onlypattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
onlypattern.lars.coef = coef(onlypattern.lars.model, s=which.min(summary(onlypattern.lars.model)$Cp), mode='step')
onlypattern.lars.sigcoef = onlypattern.lars.coef[onlypattern.lars.sigcoef.idx]
nopattern.lars.sigcoef
onlypattern.lars.sigcoef
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
#target = "CORTICAL_SUMMARY_change"
#target = "UW_EF_AV45_1"
#target = "UW_EF_slope"
#target = "ADAS_AV45_1"
#target = "ADASslope_postAV45"
#target = "AVLT_AV45_1"
#target = "AVLT_slope_postAV45"
target = "UW_MEM_AV45_1"
#target = "UW_MEM_slope"
#target = "CSF_ABETA_closest_AV45_1"
#target = "CSF_TAU_closest_AV45_1"
#target = "CSF_PTAU_closest_AV45_1"
#output_folder = 'R/output/'
output_folder = 'R/output_all_diag/'
output_folder = 'R/output_neg_emci/'
positive_value=1
#valid_diags = c('N','SMC','EMCI','LMCI','AD')
valid_diags = c('N','EMCI','LMCI','AD')
#valid_diags = c('N')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
#time_col_prefix = 'TIMEpostAV45_ADAS'
#value_col_prefix = 'ADAScog'
#time_col_prefix = 'TIMEpostAV45_AVLT.'
#value_col_prefix = 'AVLT.'
#time_col_prefix = 'WMH_postAV45.'
#value_col_prefix = 'WMH_percentOfICV.'
time_col_prefix = 'UW_EF_postAV45_'
value_col_prefix = 'UW_EF_'
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
non.na = complete.cases(df_av45[,c(demog_columns,av45_columns,target)])
df_av45 = df_av45[non.na,]
# filter by diag or postivity
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
df_av45 = df_av45[which(df_av45[,'AV45_NONTP_wcereb_BIN1.11'] == positive_value),]
# make factors
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
naive_columns = Filter(isNaiveColumn,names(df_av45))
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av45, aes_string(pcol, colour = 'positive_prior')) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,target)
cross_normalization = preProcess(df_av45[,cross_to_standardize])
df_av45[,cross_to_standardize] = predict(cross_normalization, df_av45[,cross_to_standardize])
# long_to_standardize = c(to_standardize,pattern_columns,'time','value')
# long_normalization = preProcess(df_long[,long_to_standardize])
# df_long[,long_to_standardize] = predict(long_normalization, df_long[,long_to_standardize])
# # Create long dataset
# df_long = to.long(df_av45, time_col_prefix, value_col_prefix)
# df_long$value = Gaussianize(df_long$value, type='hh', method='MLE', return.u=TRUE)
# make response normal
#df_av45[,eval(target)] = Gaussianize(df_av45[,eval(target)], type='hh', method='MLE', return.u=TRUE)
#all.addons = lapply(pattern_columns,lm.addvar)
#naive.addons = lapply(naive_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
addons_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
diag_counts = table(df_av45$Diag.AV45)
if (length((diag_counts[diag_counts>0])) > 1) {
diag_str = 'Diag.AV45 + '
} else {
diag_str = ''
}
base_form = paste(target,"~",diag_str,"Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
nopattern_form = paste(target,"~",diag_str,"CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2) + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
full_form = paste(nopattern_form,paste(all.addons,collapse=' '))
naive_form = paste(base_form,paste(naive.addons,collapse=' '))
# LARS lasso
nopattern_x = getxy(nopattern_form,df_av45)
y = as.numeric(df_av45[,target])
nopattern.lars.model = lars(nopattern_x,y,type='lasso')
nopattern.lars.test = covTest(nopattern.lars.model,nopattern_x,y)$results
nopattern.lars.sigcoef.idx = nopattern.lars.test[nopattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
nopattern.lars.coef = coef(nopattern.lars.model, s=which.min(summary(nopattern.lars.model)$Cp), mode='step')
nopattern.lars.sigcoef = nopattern.lars.coef[nopattern.lars.sigcoef.idx]
onlypattern_x = getxy(onlypattern_form,df_av45)
y = as.numeric(df_av45[,target])
onlypattern.lars.model = lars(onlypattern_x,y,type='lasso')
onlypattern.lars.test = covTest(onlypattern.lars.model,onlypattern_x,y)$results
onlypattern.lars.sigcoef.idx = onlypattern.lars.test[onlypattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
onlypattern.lars.coef = coef(onlypattern.lars.model, s=which.min(summary(onlypattern.lars.model)$Cp), mode='step')
onlypattern.lars.sigcoef = onlypattern.lars.coef[onlypattern.lars.sigcoef.idx]
nopattern.lars.sigcoef
onlypattern.lars.sigcoef
nopattern.lasso.model = run.lasso(nopattern_form,df_av45,'RMSE')
nopattern.lasso.metric = subset(nopattern.lasso.model$results, fraction == nopattern.lasso.model$bestTune$fraction)
nopattern.lasso.coef = predict.enet(nopattern.lasso.model$finalModel, type='coefficients',s=nopattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
nopattern.lasso.coef = nopattern.lasso.coef[nopattern.lasso.coef != 0]
onlypattern.lasso.model = run.lasso(onlypattern_form,df_av45,'RMSE')
onlypattern.lasso.metric = subset(onlypattern.lasso.model$results, fraction == onlypattern.lasso.model$bestTune$fraction)
onlypattern.lasso.coef = predict.enet(onlypattern.lasso.model$finalModel, type='coefficients',s=onlypattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
onlypattern.lasso.coef = onlypattern.lasso.coef[onlypattern.lasso.coef != 0]
nopattern.lasso.metric
onlypattern.lasso.metric
onlypattern_form
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
#target = "CORTICAL_SUMMARY_change"
#target = "UW_EF_AV45_1"
#target = "UW_EF_slope"
#target = "ADAS_AV45_1"
#target = "ADASslope_postAV45"
#target = "AVLT_AV45_1"
#target = "AVLT_slope_postAV45"
#target = "UW_MEM_AV45_1"
#target = "UW_MEM_slope"
target = "CSF_ABETA_closest_AV45_1"
#target = "CSF_TAU_closest_AV45_1"
#target = "CSF_PTAU_closest_AV45_1"
#output_folder = 'R/output/'
output_folder = 'R/output_all_diag/'
output_folder = 'R/output_neg_emci/'
positive_value=1
#valid_diags = c('N','SMC','EMCI','LMCI','AD')
valid_diags = c('N','EMCI','LMCI','AD')
#valid_diags = c('N')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
#time_col_prefix = 'TIMEpostAV45_ADAS'
#value_col_prefix = 'ADAScog'
#time_col_prefix = 'TIMEpostAV45_AVLT.'
#value_col_prefix = 'AVLT.'
#time_col_prefix = 'WMH_postAV45.'
#value_col_prefix = 'WMH_percentOfICV.'
time_col_prefix = 'UW_EF_postAV45_'
value_col_prefix = 'UW_EF_'
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
non.na = complete.cases(df_av45[,c(demog_columns,av45_columns,target)])
df_av45 = df_av45[non.na,]
# filter by diag or postivity
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
df_av45 = df_av45[which(df_av45[,'AV45_NONTP_wcereb_BIN1.11'] == positive_value),]
# make factors
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
naive_columns = Filter(isNaiveColumn,names(df_av45))
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av45, aes_string(pcol, colour = 'positive_prior')) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,target)
cross_normalization = preProcess(df_av45[,cross_to_standardize])
df_av45[,cross_to_standardize] = predict(cross_normalization, df_av45[,cross_to_standardize])
# long_to_standardize = c(to_standardize,pattern_columns,'time','value')
# long_normalization = preProcess(df_long[,long_to_standardize])
# df_long[,long_to_standardize] = predict(long_normalization, df_long[,long_to_standardize])
# # Create long dataset
# df_long = to.long(df_av45, time_col_prefix, value_col_prefix)
# df_long$value = Gaussianize(df_long$value, type='hh', method='MLE', return.u=TRUE)
# make response normal
#df_av45[,eval(target)] = Gaussianize(df_av45[,eval(target)], type='hh', method='MLE', return.u=TRUE)
#all.addons = lapply(pattern_columns,lm.addvar)
#naive.addons = lapply(naive_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
addons_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
diag_counts = table(df_av45$Diag.AV45)
if (length((diag_counts[diag_counts>0])) > 1) {
diag_str = 'Diag.AV45 + '
} else {
diag_str = ''
}
base_form = paste(target,"~",diag_str,"Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
nopattern_form = paste(target,"~",diag_str,"CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2) + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
full_form = paste(nopattern_form,paste(all.addons,collapse=' '))
naive_form = paste(base_form,paste(naive.addons,collapse=' '))
# LARS lasso
nopattern_x = getxy(nopattern_form,df_av45)
y = as.numeric(df_av45[,target])
nopattern.lars.model = lars(nopattern_x,y,type='lasso')
nopattern.lars.test = covTest(nopattern.lars.model,nopattern_x,y)$results
nopattern.lars.sigcoef.idx = nopattern.lars.test[nopattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
nopattern.lars.coef = coef(nopattern.lars.model, s=which.min(summary(nopattern.lars.model)$Cp), mode='step')
nopattern.lars.sigcoef = nopattern.lars.coef[nopattern.lars.sigcoef.idx]
onlypattern_x = getxy(onlypattern_form,df_av45)
y = as.numeric(df_av45[,target])
onlypattern.lars.model = lars(onlypattern_x,y,type='lasso')
onlypattern.lars.test = covTest(onlypattern.lars.model,onlypattern_x,y)$results
onlypattern.lars.sigcoef.idx = onlypattern.lars.test[onlypattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
onlypattern.lars.coef = coef(onlypattern.lars.model, s=which.min(summary(onlypattern.lars.model)$Cp), mode='step')
onlypattern.lars.sigcoef = onlypattern.lars.coef[onlypattern.lars.sigcoef.idx]
nopattern.lars.sigcoef
onlypattern.lars.sigcoef
nopattern.lasso.model = run.lasso(nopattern_form,df_av45,'RMSE')
nopattern.lasso.metric = subset(nopattern.lasso.model$results, fraction == nopattern.lasso.model$bestTune$fraction)
nopattern.lasso.coef = predict.enet(nopattern.lasso.model$finalModel, type='coefficients',s=nopattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
nopattern.lasso.coef = nopattern.lasso.coef[nopattern.lasso.coef != 0]
onlypattern.lasso.model = run.lasso(onlypattern_form,df_av45,'RMSE')
onlypattern.lasso.metric = subset(onlypattern.lasso.model$results, fraction == onlypattern.lasso.model$bestTune$fraction)
onlypattern.lasso.coef = predict.enet(onlypattern.lasso.model$finalModel, type='coefficients',s=onlypattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
onlypattern.lasso.coef = onlypattern.lasso.coef[onlypattern.lasso.coef != 0]
nopattern.lasso.metric
onlypattern.lasso.metric
onlypattern.lasso.coef
onlypattern.lasso.model
onlypattern.lasso.model = run.lasso(onlypattern_form,df_av45,'Rsquared')
onlypattern.lasso.metric = subset(onlypattern.lasso.model$results, fraction == onlypattern.lasso.model$bestTune$fraction)
onlypattern.lasso.coef = predict.enet(onlypattern.lasso.model$finalModel, type='coefficients',s=onlypattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
onlypattern.lasso.coef = onlypattern.lasso.coef[onlypattern.lasso.coef != 0]
onlypattern.lasso.metric
nopattern.lasso.metric
nopattern.lasso.model = run.lasso(nopattern_form,df_av45,'Rsquared')
nopattern.lasso.metric = subset(nopattern.lasso.model$results, fraction == nopattern.lasso.model$bestTune$fraction)
nopattern.lasso.coef = predict.enet(nopattern.lasso.model$finalModel, type='coefficients',s=nopattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
nopattern.lasso.coef = nopattern.lasso.coef[nopattern.lasso.coef != 0]
nopattern.lasso.metric
onlypattern.lasso.metric
nopattern.lasso.coef
onlypattern.lasso.coef
onlypattern.lars.sigcoef
nopattern.lars.sigcoef
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
#target = "CORTICAL_SUMMARY_change"
#target = "UW_EF_AV45_1"
#target = "UW_EF_slope"
#target = "ADAS_AV45_1"
#target = "ADASslope_postAV45"
target = "AVLT_AV45_1"
#target = "AVLT_slope_postAV45"
#target = "UW_MEM_AV45_1"
#target = "UW_MEM_slope"
#target = "CSF_ABETA_closest_AV45_1"
#target = "CSF_TAU_closest_AV45_1"
#target = "CSF_PTAU_closest_AV45_1"
#output_folder = 'R/output/'
output_folder = 'R/output_all_diag/'
output_folder = 'R/output_neg_emci/'
positive_value=1
#valid_diags = c('N','SMC','EMCI','LMCI','AD')
valid_diags = c('N','EMCI','LMCI','AD')
#valid_diags = c('N')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
#time_col_prefix = 'TIMEpostAV45_ADAS'
#value_col_prefix = 'ADAScog'
#time_col_prefix = 'TIMEpostAV45_AVLT.'
#value_col_prefix = 'AVLT.'
#time_col_prefix = 'WMH_postAV45.'
#value_col_prefix = 'WMH_percentOfICV.'
time_col_prefix = 'UW_EF_postAV45_'
value_col_prefix = 'UW_EF_'
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
non.na = complete.cases(df_av45[,c(demog_columns,av45_columns,target)])
df_av45 = df_av45[non.na,]
# filter by diag or postivity
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
df_av45 = df_av45[which(df_av45[,'AV45_NONTP_wcereb_BIN1.11'] == positive_value),]
# make factors
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
naive_columns = Filter(isNaiveColumn,names(df_av45))
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av45, aes_string(pcol, colour = 'positive_prior')) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,target)
cross_normalization = preProcess(df_av45[,cross_to_standardize])
df_av45[,cross_to_standardize] = predict(cross_normalization, df_av45[,cross_to_standardize])
# long_to_standardize = c(to_standardize,pattern_columns,'time','value')
# long_normalization = preProcess(df_long[,long_to_standardize])
# df_long[,long_to_standardize] = predict(long_normalization, df_long[,long_to_standardize])
# # Create long dataset
# df_long = to.long(df_av45, time_col_prefix, value_col_prefix)
# df_long$value = Gaussianize(df_long$value, type='hh', method='MLE', return.u=TRUE)
# make response normal
#df_av45[,eval(target)] = Gaussianize(df_av45[,eval(target)], type='hh', method='MLE', return.u=TRUE)
#all.addons = lapply(pattern_columns,lm.addvar)
#naive.addons = lapply(naive_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
addons_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
diag_counts = table(df_av45$Diag.AV45)
if (length((diag_counts[diag_counts>0])) > 1) {
diag_str = 'Diag.AV45 + '
} else {
diag_str = ''
}
base_form = paste(target,"~",diag_str,"Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
nopattern_form = paste(target,"~",diag_str,"CORTICAL_SUMMARY_prior + I(CORTICAL_SUMMARY_prior^2) + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN")
onlypattern_form = paste(base_form,paste(all.addons,collapse=' '))
full_form = paste(nopattern_form,paste(all.addons,collapse=' '))
naive_form = paste(base_form,paste(naive.addons,collapse=' '))
# LARS lasso
nopattern_x = getxy(nopattern_form,df_av45)
y = as.numeric(df_av45[,target])
nopattern.lars.model = lars(nopattern_x,y,type='lasso')
nopattern.lars.test = covTest(nopattern.lars.model,nopattern_x,y)$results
nopattern.lars.sigcoef.idx = nopattern.lars.test[nopattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
nopattern.lars.coef = coef(nopattern.lars.model, s=which.min(summary(nopattern.lars.model)$Cp), mode='step')
nopattern.lars.sigcoef = nopattern.lars.coef[nopattern.lars.sigcoef.idx]
onlypattern_x = getxy(onlypattern_form,df_av45)
y = as.numeric(df_av45[,target])
onlypattern.lars.model = lars(onlypattern_x,y,type='lasso')
onlypattern.lars.test = covTest(onlypattern.lars.model,onlypattern_x,y)$results
onlypattern.lars.sigcoef.idx = onlypattern.lars.test[onlypattern.lars.test[,'P-value'] < 0.1,'Predictor_Number']
onlypattern.lars.coef = coef(onlypattern.lars.model, s=which.min(summary(onlypattern.lars.model)$Cp), mode='step')
onlypattern.lars.sigcoef = onlypattern.lars.coef[onlypattern.lars.sigcoef.idx]
nopattern.lars.sigcoef
onlypattern.lars.sigcoef
nopattern.lasso.model = run.lasso(nopattern_form,df_av45,'Rsquared')
nopattern.lasso.metric = subset(nopattern.lasso.model$results, fraction == nopattern.lasso.model$bestTune$fraction)
nopattern.lasso.coef = predict.enet(nopattern.lasso.model$finalModel, type='coefficients',s=nopattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
nopattern.lasso.coef = nopattern.lasso.coef[nopattern.lasso.coef != 0]
onlypattern.lasso.model = run.lasso(onlypattern_form,df_av45,'Rsquared')
onlypattern.lasso.metric = subset(onlypattern.lasso.model$results, fraction == onlypattern.lasso.model$bestTune$fraction)
onlypattern.lasso.coef = predict.enet(onlypattern.lasso.model$finalModel, type='coefficients',s=onlypattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
onlypattern.lasso.coef = onlypattern.lasso.coef[onlypattern.lasso.coef != 0]
nopattern.lasso.metric
onlypattern.lasso.metric
