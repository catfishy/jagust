<<<<<<< HEAD
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
#non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
#df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
scan2_columns = Filter(isScan2Column,names(df_av45))
scan3_columns = Filter(isScan3Column,names(df_av45))
hist(df_av45$SCORE_SCAN3_NSFA_6)
=======
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.nonzerocoef
pattern.lars.sigcoef
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.2 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
braak.lars.r2
pattern.lars.r2
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.sigcoef
braak_form
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
<<<<<<< HEAD
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
#non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
#df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
=======
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
#target = "UW_EF_AV1451_1"
#target = "UW_MEM_AV1451_1"
target = "ADAS_AV1451_1"
#target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
for (i in names(df_av1451)){
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
<<<<<<< HEAD
pattern_columns = Filter(isPatternColumn,names(df_av45))
scan2_columns = Filter(isScan2Column,names(df_av45))
scan3_columns = Filter(isScan3Column,names(df_av45))
# standardize predictors
demog_normalization = preProcess(df_av45[,to_standardize])
pattern_normalization = preProcess(df_av45[,pattern_columns])
df_av45[,to_standardize] = predict(demog_normalization, df_av45[,to_standardize])
# standardize scan 2
scan2_subset = df_av45[,scan2_columns]
names(scan2_subset) = gsub("SCAN2_", "", names(scan2_subset))
scan2_subset = predict(pattern_normalization, scan2_subset)
names(scan2_subset) = gsub("SCORE_", "SCORE_SCAN2_", names(scan2_subset))
df_av45[,scan2_columns] = scan2_subset
# standardize scan 3
scan3_subset = df_av45[,scan3_columns]
names(scan3_subset) = gsub("SCAN3_", "", names(scan3_subset))
scan3_subset = predict(pattern_normalization, scan3_subset)
names(scan3_subset) = gsub("SCORE_", "SCORE_SCAN3_", names(scan3_subset))
df_av45[,scan3_columns] = scan3_subset
for (pcol in pattern_columns) {
scan2_col = gsub('SCORE','SCORE_SCAN2',pcol)
scan3_col = gsub('SCORE','SCORE_SCAN3',pcol)
scan2_change = (df_av45[,eval(scan2_col)]-df_av45[,eval(pcol)])/(df_av45$AV45_1_2_Diff)
scan3_change = (df_av45[,eval(scan3_col)]-df_av45[,eval(pcol)])/(df_av45$AV45_1_3_Diff)
all_change = scan3_change
all_change[is.na(all_change)] = scan2_change[is.na(all_change)]
df_av45[,paste('SCAN2_CHANGE_',pcol,sep='')] = scan2_change
df_av45[,paste('SCAN3_CHANGE_',pcol,sep='')] = scan3_change
df_av45[,paste('ALL_CHANGE_',pcol,sep='')] = all_change
}
for (pcol in pattern_columns) {
scan2_change_col = paste('SCAN2_CHANGE_',pcol,sep='')
scan3_change_col = paste('SCAN3_CHANGE_',pcol,sep='')
all_change_col = paste('ALL_CHANGE_',pcol,sep='')
p = ggplot(df_av45, aes_string(x=pcol, y=all_change_col)) +
geom_point(shape=1) +
geom_smooth()
print(p)
#plot(df_av45[,eval(pcol)],scan2_change,main=pcol,xlab='Baseline Factor',ylab='Annualized Change')
#abline(0,0,col='red')
}
hist(df_av45$SCORE_SCAN3_NSFA_6)
hist(df_av45$SCORE_SCAN2_NSFA_6)
hist(df_av45$SCORE_NSFA_6)
=======
# Filter by diag
# df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
# diag_str = 'Diag.AV1451*APOE4_BIN +'
# diag_str = 'Diag.AV1451 +'
diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
pattern.lars.sigcoef
braak.lars.sigcoef
braak.lars.r2
pattern.lars.r2
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
pattern_form
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
<<<<<<< HEAD
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
#non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
#df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
=======
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
target = "UW_EF_AV1451_1"
#target = "UW_MEM_AV1451_1"
#target = "ADAS_AV1451_1"
#target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
for (i in names(df_av1451)){
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
<<<<<<< HEAD
pattern_columns = Filter(isPatternColumn,names(df_av45))
scan2_columns = Filter(isScan2Column,names(df_av45))
scan3_columns = Filter(isScan3Column,names(df_av45))
hist(df_av45$SCORE_NSFA_6)
hist(df_av45$SCORE_SCAN2_NSFA_6)
hist(df_av45$SCORE_SCAN3_NSFA_6)
pattern_columns
demog_normalization = preProcess(df_av45[,to_standardize])
pattern_normalization = preProcess(df_av45[,pattern_columns])
df_av45[,to_standardize] = predict(demog_normalization, df_av45[,to_standardize])
df_av45[,pattern_columns] = predict(pattern_normalization, df_av45[,pattern_columns])
# standardize scan 2
scan2_subset = df_av45[,scan2_columns]
names(scan2_subset) = gsub("SCAN2_", "", names(scan2_subset))
scan2_subset = predict(pattern_normalization, scan2_subset)
names(scan2_subset) = gsub("SCORE_", "SCORE_SCAN2_", names(scan2_subset))
df_av45[,scan2_columns] = scan2_subset
# standardize scan 3
scan3_subset = df_av45[,scan3_columns]
names(scan3_subset) = gsub("SCAN3_", "", names(scan3_subset))
scan3_subset = predict(pattern_normalization, scan3_subset)
names(scan3_subset) = gsub("SCORE_", "SCORE_SCAN3_", names(scan3_subset))
df_av45[,scan3_columns] = scan3_subset
hist(df_av45$SCORE_NSFA_6)
for (pcol in pattern_columns) {
scan2_col = gsub('SCORE','SCORE_SCAN2',pcol)
scan3_col = gsub('SCORE','SCORE_SCAN3',pcol)
scan2_change = (df_av45[,eval(scan2_col)]-df_av45[,eval(pcol)])/(df_av45$AV45_1_2_Diff)
scan3_change = (df_av45[,eval(scan3_col)]-df_av45[,eval(pcol)])/(df_av45$AV45_1_3_Diff)
all_change = scan3_change
all_change[is.na(all_change)] = scan2_change[is.na(all_change)]
df_av45[,paste('SCAN2_CHANGE_',pcol,sep='')] = scan2_change
df_av45[,paste('SCAN3_CHANGE_',pcol,sep='')] = scan3_change
df_av45[,paste('ALL_CHANGE_',pcol,sep='')] = all_change
}
for (pcol in pattern_columns) {
scan2_change_col = paste('SCAN2_CHANGE_',pcol,sep='')
scan3_change_col = paste('SCAN3_CHANGE_',pcol,sep='')
all_change_col = paste('ALL_CHANGE_',pcol,sep='')
p = ggplot(df_av45, aes_string(x=pcol, y=all_change_col)) +
geom_point(shape=1) +
geom_smooth()
print(p)
#plot(df_av45[,eval(pcol)],scan2_change,main=pcol,xlab='Baseline Factor',ylab='Annualized Change')
#abline(0,0,col='red')
}
ggplot(df_av45, aes(x=CORTICAL_SUMMARY_prior,y=CORTICAL_SUMMARY_change)) + geom_point(shape=1) + geom_smooth()
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
valid_diags = c('N','EMCI','LMCI')
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
naive_columns = Filter(isNaiveColumn,names(df_av45))
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns)
cross_normalization = preProcess(df_av45[,cross_to_standardize])
df_av45[,cross_to_standardize] = predict(cross_normalization, df_av45[,cross_to_standardize])
=======
# Filter by diag
# df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
# diag_str = 'Diag.AV1451*APOE4_BIN +'
# diag_str = 'Diag.AV1451 +'
diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
pattern.lars.r2
braak.lars.r2
braak.lars.nonzerocoef
pattern.lars.nonzerocoef
pattern.lars.sigcoef
braak.lars.sigcoef
pattern.lars.r2
braak.lars.r2
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
braak.lars.sigcoef
pattern.lars.sigcoef
demean
?preProcess
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
target_normalization = preProcess(df_av1451[,target],method='center')
df_av1451[,target] = predict(target_normalization, df_av1451[,target])
target_normalization = preProcess(df_av1451[,c(target)],method='center')
df_av1451[,c(target)] = predict(target_normalization, df_av1451[,c(target)])
Jmean
install.packages('Jmean')
install.packages('Jmisc')
library(Jmisc)
target
df_av1451[,target]
df_av1451[,target] = scale(df_av1451[,target], center=TRUE, scale=FALSE)
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(Jmisc)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
<<<<<<< HEAD
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
=======
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
#target = "UW_EF_AV1451_1"
target = "UW_MEM_AV1451_1"
#target = "ADAS_AV1451_1"
#target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
valid_diags = c('N','SMC','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
<<<<<<< HEAD
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
=======
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
for (i in names(df_av1451)){
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
<<<<<<< HEAD
pattern_columns = Filter(isPatternColumn,names(df_av45))
naive_columns = Filter(isNaiveColumn,names(df_av45))
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns)
cross_normalization = preProcess(df_av45[,cross_to_standardize])
df_av45[,cross_to_standardize] = predict(cross_normalization, df_av45[,cross_to_standardize])
# make response normal
#df_av45[,eval(target)] = Gaussianize(df_av45[,eval(target)], type='hh', method='MLE', return.u=TRUE)
pattern_columns
#all.addons = lapply(pattern_columns,lm.addvar)
#naive.addons = lapply(naive_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
ancova_factors = 'APOE4_BIN + Gender + Age.AV45 + Edu..Yrs. + Diag.AV45'
pattern_formula = lapply(pattern_columns, function (x) lm.createformula(x,ancova_factors))
naive_formula = lapply(naive_columns, function (x) lm.createformula(x,ancova_factors))
pvalues = list()
for (i in 1:NROW(pattern_formula)) {
pattern_str = pattern_columns[i]
formula = as.formula(paste(pattern_formula[i]))
cur.lm = lm(formula,df_av45)
cur.lm.summary = summary(cur.lm)
cur.lm.coef = cur.lm.summary$coefficients
fstat = cur.lm.summary$fstatistic
cur.lm.pvalue = pf(fstat[1],fstat[2],fstat[3],lower.tail=F)
pvalues[pattern_str] = cur.lm.pvalue
cur.lm.anova = Anova(cur.lm,type='III')
save.printout(paste(output_folder,pattern_str,'_ancova_anova','.txt',sep=''),cur.lm.anova)
save.printout(paste(output_folder,pattern_str,'_ancova_summary','.txt',sep=''),cur.lm.summary)
lm.plotfn = function() {par(mfrow=c(2,2));plot(cur.lm);title(pattern_str, outer=T, line=-2);}
save.plot(paste(output_folder,pattern_str,'_lmplot.pdf',sep=''), lm.plotfn)
save.plot(paste(output_folder,pattern_str,'_avplot.pdf',sep=''), function() {avPlots(cur.lm, ask=FALSE)})
}
pvalues.corrected = p.adjust(pvalues,method='bonferroni')
pvalues.sig = pvalues.corrected[pvalues.corrected < 0.05]
pvalues.sig
plot(df_av45$SCORE_NSFA_6,df_av45$SCORE_NSFA_27)
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
#non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
#df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av45))
scan2_columns = Filter(isScan2Column,names(df_av45))
scan3_columns = Filter(isScan3Column,names(df_av45))
# standardize predictors
demog_normalization = preProcess(df_av45[,to_standardize])
pattern_normalization = preProcess(df_av45[,pattern_columns])
df_av45[,to_standardize] = predict(demog_normalization, df_av45[,to_standardize])
df_av45[,pattern_columns] = predict(pattern_normalization, df_av45[,pattern_columns])
# standardize scan 2
scan2_subset = df_av45[,scan2_columns]
names(scan2_subset) = gsub("SCAN2_", "", names(scan2_subset))
scan2_subset = predict(pattern_normalization, scan2_subset)
names(scan2_subset) = gsub("SCORE_", "SCORE_SCAN2_", names(scan2_subset))
df_av45[,scan2_columns] = scan2_subset
# standardize scan 3
scan3_subset = df_av45[,scan3_columns]
names(scan3_subset) = gsub("SCAN3_", "", names(scan3_subset))
scan3_subset = predict(pattern_normalization, scan3_subset)
names(scan3_subset) = gsub("SCORE_", "SCORE_SCAN3_", names(scan3_subset))
df_av45[,scan3_columns] = scan3_subset
for (pcol in pattern_columns) {
scan2_col = gsub('SCORE','SCORE_SCAN2',pcol)
scan3_col = gsub('SCORE','SCORE_SCAN3',pcol)
scan2_change = (df_av45[,eval(scan2_col)]-df_av45[,eval(pcol)])/(df_av45$AV45_1_2_Diff)
scan3_change = (df_av45[,eval(scan3_col)]-df_av45[,eval(pcol)])/(df_av45$AV45_1_3_Diff)
all_change = scan3_change
all_change[is.na(all_change)] = scan2_change[is.na(all_change)]
df_av45[,paste('SCAN2_CHANGE_',pcol,sep='')] = scan2_change
df_av45[,paste('SCAN3_CHANGE_',pcol,sep='')] = scan3_change
df_av45[,paste('ALL_CHANGE_',pcol,sep='')] = all_change
}
df_av45$Diag.AV1451
df_av45$Diag.AV45
for (pcol in pattern_columns) {
scan2_change_col = paste('SCAN2_CHANGE_',pcol,sep='')
scan3_change_col = paste('SCAN3_CHANGE_',pcol,sep='')
all_change_col = paste('ALL_CHANGE_',pcol,sep='')
p = ggplot(df_av45, aes_string(x=pcol, y=all_change_col)) +
geom_point(aes_string(x=pcol, colour ='Diag.AV45'), shape=1) +
geom_smooth()
print(p)
#plot(df_av45[,eval(pcol)],scan2_change,main=pcol,xlab='Baseline Factor',ylab='Annualized Change')
#abline(0,0,col='red')
}
ggplot(df_av45, aes(x=CORTICAL_SUMMARY_prior,y=CORTICAL_SUMMARY_change))
+ geom_point(aes_string(x=pcol, colour ='Diag.AV45'), shape=1)
+ geom_smooth()
ggplot(df_av45, aes(x=CORTICAL_SUMMARY_prior,y=CORTICAL_SUMMARY_change))
+ geom_point(aes_string(x=CORTICAL_SUMMARY_prior, colour ='Diag.AV45'), shape=1)
+ geom_smooth()
ggplot(df_av45, aes(x=CORTICAL_SUMMARY_prior,y=CORTICAL_SUMMARY_change)) +
geom_point(aes_string(x=CORTICAL_SUMMARY_prior, colour ='Diag.AV45'), shape=1) +
geom_smooth()
ggplot(df_av45, aes_string(x='CORTICAL_SUMMARY_prior',y='CORTICAL_SUMMARY_change')) +
geom_point(aes_string(x='CORTICAL_SUMMARY_prior', colour ='Diag.AV45'), shape=1) +
geom_smooth()
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('CORTICAL_SUMMARY_prior','Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
av45_columns = c('CORTICAL_SUMMARY_prior')
output_folder = 'R/output_av45_ancova/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
# IMPORT
df_av45 = read.csv('nsfa/av45_pattern_dataset.csv')
df_av45 = df_av45[which(df_av45$Diag.AV45 %in% valid_diags),]
#non.na = complete.cases(df_av45[,c(demog_columns,av45_columns)])
#df_av45 = df_av45[non.na,]
for (i in names(df_av45)){
if (i %in% to_factor){
df_av45[,eval(i)] = as.factor(as.character(df_av45[,eval(i)]))
}
}
pattern_columns = Filter(function(i) {startsWith(i,'NSFA_')}, names(df_av45))
pattern_columns
=======
# Filter by diag
# df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
#df_av1451[,target] = scale(df_av1451[,target], center=TRUE, scale=FALSE)
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
# diag_str = 'Diag.AV1451*APOE4_BIN +'
# diag_str = 'Diag.AV1451 +'
diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.sigcoef
pattern.lars.r2
braak.lars.r2
rfe.braak = run.rfe(braak_form, target, df_av1451, 2)
rfe.pattern = run.rfe(pattern_form, target, df_av1451, 2)
fm_braak = rfe.braak$fit
fm_pattern = rfe.pattern$fit
rfe.braak
rfe.pattern
target
fm_braak.summary = summary(fm_braak)
fm_pattern.summary = summary(fm_pattern)
fm_braak.fit = sem.model.fits(fm_braak)
fm_pattern.fit = sem.model.fits(fm_pattern)
fm_braak.fit
fm_pattern.fit
fm_pattern.summary
fm_braak.summary
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.1 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
braak.lars.nonzerocoef = braak.lars.coef[braak.lars.coef != 0]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.1 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.nonzerocoef = pattern.lars.coef[pattern.lars.coef != 0]
braak.lars.sigcoef
pattern.lars.sigcoef
braak.lars.r2
pattern.lars.r2
target
>>>>>>> 2bf435541afe605313eb38135433db6a766b8dd3
