library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
#target = "UW_EF_AV1451_1"
#target = "UW_MEM_AV1451_1"
#target = "ADAS_AV1451_1"
target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
for (i in names(df_av1451)){
if (i %in% to_factor){
df_av1451[,eval(i)] = as.factor(as.character(df_av1451[,eval(i)]))
}
}
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
# # look at histograms
# for (pcol in pattern_columns) {
#   p = ggplot(df_av1451, aes_string(pcol)) + geom_histogram(binwidth=0.1)
#   print(p)
# }
# make crossx response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
#pattern_columns = c("NSFA_1","NSFA_2","NSFA_6","NSFA_7")
# Formula setup
# all.addons = lapply(pattern_columns,lm.addvar)
# naive.addons = lapply(naive_columns,lm.addvar)
# braak.addons = lapply(braak_columns,lm.addvar)
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
#diag_str = 'Diag.AV1451*APOE4_BIN +'
diag_str = 'Diag.AV1451 +'
#diag_str = ''
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.2,'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2,'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
braak.lars.sigcoef
pattern.lars.sigcoef
braak.lasso.model = run.lasso(braak_form,df_av1451,'Rsquared')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'Rsquared')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.metric
pattern.lasso.metric
braak.lasso.coef
pattern.lasso.coef
# LARS lasso
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.2,'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2,'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
braak.lars.sigcoef
pattern.lars.sigcoef
pattern.lars.model
summary(pattern.lars.model)
pattern.lars.model$R2
which.min(summary(pattern.lars.model)$Cp)
pattern.lars.model
predict.lars(pattern.lars.model, pattern_x, s=which.min(summary(pattern.lars.model)$Cp))
?predict.lars
pattern.lars.model$Cp
pattern.lars.model$R2
pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.r2
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.r2
pattern.lars.r2
which.min(summary(braak.lars.model)$Cp)
braak.lars.sigcoef
pattern.lars.sigcoef
pattern.lars.model$RSS
summary(pattern.lars.model)
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.coef
pattern.lars.sigcoef
?lars
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lar')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2,'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2,'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
pattern.lars.sigcoef
pattern.lars.r2
target
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45','Diag.AV1451','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11','AV45_NONTP_2_wcereb_BIN1.11',
'AV45_NONTP_3_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV1451','Age.AV1451','Gender','Edu..Yrs.')
diag_columns = c('Diag.AV45','Diag.AV1451')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
#target = "UW_EF_AV1451_1"
#target = "UW_MEM_AV1451_1"
#target = "ADAS_AV1451_1"
target = "AVLT_AV1451_1"
output_folder = 'R/output_av1451/'
valid_diags = c('N','EMCI','LMCI','AD')
#valid_diags = c('N','SMC','EMCI','LMCI')
#valid_diags = c('N','SMC')
#valid_diags = c('EMCI')
#valid_diags = c('LMCI')
# IMPORT
df_av1451 = read.csv('nsfa/av1451uni_pattern_dataset.csv')
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns,target)])
df_av1451 = df_av1451[non.na,]
df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
for (i in names(df_av1451)){
if (i %in% to_factor){
df_av1451[,eval(i)] = as.factor(as.character(df_av1451[,eval(i)]))
}
}
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns,target)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
pattern_columns
all.addons = paste('+',paste(pattern_columns,collapse=' + '))
naive.addons = paste('+',paste(naive_columns,collapse=' + '))
braak.addons = paste('+',paste(braak_columns,collapse=' + '))
patterns_str = paste(all.addons,collapse=' ')
naive_str = paste(naive.addons,collapse=' ')
braak_str = paste(braak.addons,collapse=' ')
diag_str = 'Diag.AV1451 +'
base_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.")
braak_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",braak_str)
pattern_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str)
naive_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",naive_str)
full_form = paste(target,"~",diag_str,"APOE4_BIN + Age.AV1451 + Gender + Edu..Yrs.",patterns_str,braak_str)
# onlypattern_form = str_replace(paste(target,"~",paste(all.addons,collapse=' ')),"\\+ ","")
full_form
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.2,'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2,'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
braak.lars.sigcoef
pattern.lars.sigcoef
pattern.lars.sigcoef.idx
pattern.lars.test
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(x),'Predictor_Number']
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.sigcoef.idx
braak_x = getxy(braak_form,df_av1451)
y = as.numeric(df_av1451[,target])
braak.lars.model = lars(braak_x,y,type='lasso')
braak.lars.test = covTest(braak.lars.model,braak_x,y)$results
braak.lars.sigcoef.idx = braak.lars.test[braak.lars.test[,'P-value'] < 0.2 & !is.na(braak.lars.test[,'P-value']),'Predictor_Number']
braak.lars.coef = coef(braak.lars.model, s=which.min(summary(braak.lars.model)$Cp), mode='step')
braak.lars.r2 = braak.lars.model$R2[which.min(summary(braak.lars.model)$Cp)]
braak.lars.sigcoef = braak.lars.coef[braak.lars.sigcoef.idx]
pattern_x = getxy(pattern_form,df_av1451)
y = as.numeric(df_av1451[,target])
pattern.lars.model = lars(pattern_x,y,type='lasso')
pattern.lars.test = covTest(pattern.lars.model,pattern_x,y)$results
pattern.lars.sigcoef.idx = pattern.lars.test[pattern.lars.test[,'P-value'] < 0.2 & !is.na(pattern.lars.test[,'P-value']),'Predictor_Number']
pattern.lars.coef = coef(pattern.lars.model, s=which.min(summary(pattern.lars.model)$Cp), mode='step')
pattern.lars.r2 = pattern.lars.model$R2[which.min(summary(pattern.lars.model)$Cp)]
pattern.lars.sigcoef = pattern.lars.coef[pattern.lars.sigcoef.idx]
braak.lars.sigcoef
pattern.lars.sigcoef
braak.lars.r2
pattern.lars.r2
pattern.lars.coef
pattern.lars.test
pattern.lars.sigcoef
braak.lasso.model = run.lasso(braak_form,df_av1451,'RMSE')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'RMSE')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
braak.lasso.coef
pattern.lasso.coef
pattern.lasso.metric
braak.lasso.metric
pattern_form
braak.lars.model
braak.lars.cp = which.min(summary(braak.lars.model)$Cp)
braak.lars.cp
braak.lars.cp = min(summary(braak.lars.model)$Cp)
braak.lars.cp
pattern.lars.cp = min(summary(pattern.lars.model)$Cp)
pattern.lars.cp
braak.lars.r2
pattern.lars.r2
pattern.lars.sigcoef
braak.lars.sigcoef
pattern.lars.model
braak.lars.test
braak.lars.sigcoef
pattern.lars.sigcoef
target
test_braak = lm(AVLT_AV1451_1 ~ Age.AV1451 + AV1451_Braak1_CerebGray_BL + AV1451_Braak4_CerebGray_BL, df_av1451)
test_pattern = lm(AVLT_AV1451_1 ~ Age.AV1451 + NSFA_2 + NSFA_0, df_av1451)
summary(test_braak)
summary(test_pattern)
pattern.lars.sigcoef
pattern.lars.coef
cv.lars(pattern_x,y)
cv.lars(pattern_x,y,type='lasso')
cv.lars(pattern_x,y,type='lasso')
cv.lars(pattern_x,y,type='lasso',index=which.min(summary(pattern.lars.model)$Cp),mode='step')
which.min(summary(pattern.lars.model)$Cp)
cv.lars(pattern_x,y,type='lasso')
lars.cv = cv.lars(pattern_x,y,type='lasso')
lars.cv$cv.error
lars.cv$index
lars.cv = cv.lars(pattern_x,y,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
lars.cv = cv.lars(pattern_x,y,K=20,type='lasso')
braak.lars.test
braak.lasso.model = run.lasso(braak_form,df_av1451,'Rsquared')
braak.lasso.metric = subset(braak.lasso.model$results, fraction == braak.lasso.model$bestTune$fraction)
braak.lasso.coef = predict.enet(braak.lasso.model$finalModel, type='coefficients',s=braak.lasso.model$bestTune$fraction, mode='fraction')$coefficients
braak.lasso.coef = braak.lasso.coef[braak.lasso.coef != 0]
pattern.lasso.model = run.lasso(pattern_form,df_av1451,'Rsquared')
pattern.lasso.metric = subset(pattern.lasso.model$results, fraction == pattern.lasso.model$bestTune$fraction)
pattern.lasso.coef = predict.enet(pattern.lasso.model$finalModel, type='coefficients',s=pattern.lasso.model$bestTune$fraction, mode='fraction')$coefficients
pattern.lasso.coef = pattern.lasso.coef[pattern.lasso.coef != 0]
pattern.lasso.metric
braak.lasso.metric
pattern.lasso.coef
braak.lasso.coef
naive.lasso.model = run.lasso(naive_form,df_av1451,'Rsquared')
naive.lasso.metric = subset(naive.lasso.model$results, fraction == naive.lasso.model$bestTune$fraction)
naive.lasso.coef = predict.enet(naive.lasso.model$finalModel, type='coefficients',s=naive.lasso.model$bestTune$fraction, mode='fraction')$coefficients
naive.lasso.coef = naive.lasso.coef[naive.lasso.coef != 0]
naive.lasso.metric
pattern.lasso.metric
pattern.lasso.coef
naive.lasso.coef
full.lasso.model = run.lasso(full_form,df_av1451,'Rsquared')
full.lasso.metric = subset(full.lasso.model$results, fraction == full.lasso.model$bestTune$fraction)
full.lasso.coef = predict.enet(full.lasso.model$finalModel, type='coefficients',s=full.lasso.model$bestTune$fraction, mode='fraction')$coefficients
full.lasso.coef = full.lasso.coef[full.lasso.coef != 0]
full.lasso.metric
full.lasso.coef
full.lasso.model = run.lasso(full_form,df_av1451,'RMSE')
full.lasso.metric = subset(full.lasso.model$results, fraction == full.lasso.model$bestTune$fraction)
full.lasso.coef = predict.enet(full.lasso.model$finalModel, type='coefficients',s=full.lasso.model$bestTune$fraction, mode='fraction')$coefficients
full.lasso.coef = full.lasso.coef[full.lasso.coef != 0]
full.lasso.coef
full.lasso.metric
braak.lars.r2
pattern.lars.r2
pattern.lars.sigcoef
pattern.lars.coef
summary(test_braak)
summary(test_pattern)
pattern.lars.sigcoef
library(lme4)
library(coefplot2)
library(ggplot2)
library(lmerTest)
library(pbkrtest)
library(multcomp)
library(contrast)
library(xtable)
library(sjPlot)
library(splines)
library(car)
library(stats)
library(gdata)
library(psych)
library(reshape2)
library(piecewiseSEM)
library(LambertW)
library(nnet)
library(DAAG)
library(relaimpo)
library(caret)
library(cvTools)
library(VGAM)
library(lmtest)
library(languageR)
library(stringr)
library(covTest)
source('R/LM_FUNCS.R')
# CONSTANTS
pattern_prefix = 'NSFA_'
to_factor = c('RID','ad_prior','ad_post','positive_prior','positive_post',
'diag_prior','diag_post','APOE4_BIN','APOE2_BIN','Gender',
'Diag.AV45_long','positive_prior','positive_post',
'AV45_NONTP_wcereb_BIN1.11')
to_standardize = c('Age.AV45','Edu..Yrs.')
demog_columns = c('RID','APOE4_BIN','Diag.AV45','Age.AV45','Gender','Edu..Yrs.')
braak_columns = c('AV1451_Braak1_CerebGray_BL',
'AV1451_Braak2_CerebGray_BL',
'AV1451_Braak3_CerebGray_BL',
'AV1451_Braak4_CerebGray_BL',
'AV1451_Braak5_CerebGray_BL',
'AV1451_Braak6_CerebGray_BL')
output_folder = 'R/output_av1451uni_ancova/'
valid_diags = c('N','SMC','EMCI','LMCI','AD')
# IMPORT
df_av1451 = read.csv('nsfa/av1451uni_pattern_dataset.csv')
non.na = complete.cases(df_av1451[,c(demog_columns,braak_columns)])
df_av1451 = df_av1451[non.na,]
df_av1451 = df_av1451[which(df_av1451$Diag.AV1451 %in% valid_diags),]
for (i in names(df_av1451)){
if (i %in% to_factor){
df_av1451[,eval(i)] = as.factor(as.character(df_av1451[,eval(i)]))
}
}
pattern_columns = Filter(isPatternColumn,names(df_av1451))
naive_columns = Filter(isNaiveColumn,names(df_av1451))
# standardize predictors
cross_to_standardize = c(to_standardize,pattern_columns,naive_columns,braak_columns)
cross_normalization = preProcess(df_av1451[,cross_to_standardize])
df_av1451[,cross_to_standardize] = predict(cross_normalization, df_av1451[,cross_to_standardize])
# make response normal
#df_av1451[,eval(target)] = Gaussianize(df_av1451[,eval(target)], type='hh', method='MLE', return.u=TRUE)
ancova_factors = 'APOE4_BIN + Gender + Age.AV1451 + Edu..Yrs. + Diag.AV1451'
pattern_formula = lapply(pattern_columns, function (x) lm.createformula(x,ancova_factors))
naive_formula = lapply(naive_columns, function (x) lm.createformula(x,ancova_factors))
braak_formula = lapply(braak_columns, function (x) lm.createformula(x,ancova_factors))
pvalues = list()
for (i in 1:NROW(pattern_formula)) {
pattern_str = pattern_columns[i]
formula = as.formula(paste(pattern_formula[i]))
cur.lm = lm(formula,df_av1451)
cur.lm.summary = summary(cur.lm)
cur.lm.coef = cur.lm.summary$coefficients
fstat = cur.lm.summary$fstatistic
cur.lm.pvalue = pf(fstat[1],fstat[2],fstat[3],lower.tail=F)
pvalues[pattern_str] = cur.lm.pvalue
cur.lm.anova = Anova(cur.lm,type='III')
save.printout(paste(output_folder,pattern_str,'_ancova_anova','.txt',sep=''),cur.lm.anova)
save.printout(paste(output_folder,pattern_str,'_ancova_summary','.txt',sep=''),cur.lm.summary)
lm.plotfn = function() {par(mfrow=c(2,2));plot(cur.lm);title(pattern_str, outer=T, line=-2);}
save.plot(paste(output_folder,pattern_str,'_lmplot.pdf',sep=''), lm.plotfn)
save.plot(paste(output_folder,pattern_str,'_avplot.pdf',sep=''), function() {avPlots(cur.lm, ask=FALSE)})
}
for (i in 1:NROW(braak_formula)) {
pattern_str = braak_columns[i]
formula = as.formula(paste(braak_formula[i]))
cur.lm = lm(formula,df_av1451)
cur.lm.summary = summary(cur.lm)
cur.lm.coef = cur.lm.summary$coefficients
fstat = cur.lm.summary$fstatistic
cur.lm.pvalue = pf(fstat[1],fstat[2],fstat[3],lower.tail=F)
pvalues[pattern_str] = cur.lm.pvalue
cur.lm.anova = Anova(cur.lm,type='III')
save.printout(paste(output_folder,pattern_str,'_ancova_anova','.txt',sep=''),cur.lm.anova)
save.printout(paste(output_folder,pattern_str,'_ancova_summary','.txt',sep=''),cur.lm.summary)
lm.plotfn = function() {par(mfrow=c(2,2));plot(cur.lm);title(pattern_str, outer=T, line=-2);}
save.plot(paste(output_folder,pattern_str,'_lmplot.pdf',sep=''), lm.plotfn)
save.plot(paste(output_folder,pattern_str,'_avplot.pdf',sep=''), function() {avPlots(cur.lm, ask=FALSE)})
}
pvalues.corrected = p.adjust(pvalues,method='bonferroni')
pvalues.sig = pvalues.corrected[pvalues.corrected < 0.05]
pvalues.sig
pvalues.corrected
