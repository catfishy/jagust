mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
root.results = uniroot(f, interval=c(-.01,0.06))
root.results = uniroot(f, interval=c(-.01,0.06))
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(-.01,0.06))
mus
root.results = uniroot(f, interval=mus)
root.results$root
root.results = uniroot(f, interval=c(-0.01,0.01))
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
library(mixtools)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = df[complete.cases(df$AV45_NONTP_1_BigRef),]
df$AV45_NONTP_1_BigRef_BIN.82 = (df$AV45_NONTP_1_BigRef >= 0.82)
# only take negative normals at baseline
# df = df[(df$Diag.AV45=='N' & df$AV45_NONTP_1_BigRef_BIN.82==0),]
# extract values
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.2]
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
hist(bigref.vals,breaks=100)
hist(twopt.slope.vals,breaks=100)
hist(threept.slope.vals,breaks=100)
hist(allpt.slope.vals,breaks=100)
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(-0.01,0.01))
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
library(mixtools)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = df[complete.cases(df$AV45_NONTP_1_BigRef),]
df$AV45_NONTP_1_BigRef_BIN.82 = (df$AV45_NONTP_1_BigRef >= 0.82)
# only take negative normals at baseline
df = df[(df$Diag.AV45=='N' & df$AV45_NONTP_1_BigRef_BIN.82==0),]
# extract values
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.2]
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
hist(bigref.vals,breaks=100)
hist(twopt.slope.vals,breaks=100)
hist(threept.slope.vals,breaks=100)
hist(allpt.slope.vals,breaks=100)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = df[complete.cases(df$AV45_NONTP_1_BigRef),]
df$AV45_NONTP_1_BigRef_BIN.82 = (df$AV45_NONTP_1_BigRef >= 0.82)
df = df[(df$AV45_NONTP_1_BigRef_BIN.82==0),]
# extract values
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.2]
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
hist(bigref.vals,breaks=100)
hist(twopt.slope.vals,breaks=100)
hist(threept.slope.vals,breaks=100)
hist(allpt.slope.vals,breaks=100)
mix.results = normalmixEM(twopt.slope.vals)
library(mixtools)
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results = uniroot(f, interval=c(-0.001,0.06))
root.results$root
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
hist(threept.slope.vals,breaks=100)
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(-0.001,0.06))
root.results$root
mus
allpt.slope.vals[(allpt.slope.vals > 0 & allpt.slope.vals < 0.004)]
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mus
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(-0.001,0.06))
root.results$root
library(mixtools)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = df[complete.cases(df$AV45_NONTP_1_BigRef),]
df$AV45_NONTP_1_BigRef_BIN.82 = (df$AV45_NONTP_1_BigRef >= 0.82)
# only take negative normals at baseline
# df = df[(df$Diag.AV45=='N' & df$AV45_NONTP_1_BigRef_BIN.82==0),]
# only take negatives at baseline
df = df[(df$AV45_NONTP_1_BigRef_BIN.82==0),]
# extract values
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.2]
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
hist(bigref.vals,breaks=100)
hist(twopt.slope.vals,breaks=100)
hist(threept.slope.vals,breaks=100)
hist(allpt.slope.vals,breaks=100)
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mix.results = normalmixEM(twopt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(-0.001,0.06))
root.results$root
root.results = uniroot(f, interval=c(-0.001,0.06))
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
mix.results = normalmixEM(threept.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
mus
hist(threept.slope.vals,breaks=100)
input_file = '/usr/local/jagust/ADNI_BL_AV45Neg_Normals.csv'
df = read.csv(input_file)
slope.thresh = 0.004
# get the accumulators
df = df[complete.cases(df$AV45_NONTP_BigRef_Slope),]
df$accum = factor(df$AV45_NONTP_BigRef_Slope > slope.thresh)
# df = df[complete.cases(df$AV45_NONTP_BigRef_Slope_3pts),]
# df$accum = factor(df$AV45_NONTP_BigRef_Slope_3pts > slope.thresh)
# output file name
out.name = '/usr/local/jagust/AV45_NegNormal_accumAllgroup_region_anova.csv'
# out.name = '/usr/local/jagust/AV45_NegNormal_accum3ptgroup_region_anova.csv'
demog = c('RID','Gender','APOE4_BIN','Age.AV45','AV45_NONTP_BigRef_Slope','AV45_NONTP_BigRef_Slope_3pts')
# regions = c('CTX_LH_BANKSSTS','CTX_LH_CAUDALANTERIORCINGULATE','CTX_LH_CAUDALMIDDLEFRONTAL','CTX_LH_CUNEUS','CTX_LH_ENTORHINAL','CTX_LH_FRONTALPOLE','CTX_LH_FUSIFORM','CTX_LH_INFERIORPARIETAL','CTX_LH_INFERIORTEMPORAL','CTX_LH_INSULA','CTX_LH_ISTHMUSCINGULATE','CTX_LH_LATERALOCCIPITAL','CTX_LH_LATERALORBITOFRONTAL','CTX_LH_LINGUAL','CTX_LH_MEDIALORBITOFRONTAL','CTX_LH_MIDDLETEMPORAL','CTX_LH_PARACENTRAL','CTX_LH_PARAHIPPOCAMPAL','CTX_LH_PARSOPERCULARIS','CTX_LH_PARSORBITALIS','CTX_LH_PARSTRIANGULARIS','CTX_LH_PERICALCARINE','CTX_LH_POSTCENTRAL','CTX_LH_POSTERIORCINGULATE','CTX_LH_PRECENTRAL','CTX_LH_PRECUNEUS','CTX_LH_ROSTRALANTERIORCINGULATE','CTX_LH_ROSTRALMIDDLEFRONTAL','CTX_LH_SUPERIORFRONTAL','CTX_LH_SUPERIORPARIETAL','CTX_LH_SUPERIORTEMPORAL','CTX_LH_SUPRAMARGINAL','CTX_LH_TEMPORALPOLE','CTX_LH_TRANSVERSETEMPORAL','CTX_RH_BANKSSTS','CTX_RH_CAUDALANTERIORCINGULATE','CTX_RH_CAUDALMIDDLEFRONTAL','CTX_RH_CUNEUS','CTX_RH_ENTORHINAL','CTX_RH_FRONTALPOLE','CTX_RH_FUSIFORM','CTX_RH_INFERIORPARIETAL','CTX_RH_INFERIORTEMPORAL','CTX_RH_INSULA','CTX_RH_ISTHMUSCINGULATE','CTX_RH_LATERALOCCIPITAL','CTX_RH_LATERALORBITOFRONTAL','CTX_RH_LINGUAL','CTX_RH_MEDIALORBITOFRONTAL','CTX_RH_MIDDLETEMPORAL','CTX_RH_PARACENTRAL','CTX_RH_PARAHIPPOCAMPAL','CTX_RH_PARSOPERCULARIS','CTX_RH_PARSORBITALIS','CTX_RH_PARSTRIANGULARIS','CTX_RH_PERICALCARINE','CTX_RH_POSTCENTRAL','CTX_RH_POSTERIORCINGULATE','CTX_RH_PRECENTRAL','CTX_RH_PRECUNEUS','CTX_RH_ROSTRALANTERIORCINGULATE','CTX_RH_ROSTRALMIDDLEFRONTAL','CTX_RH_SUPERIORFRONTAL','CTX_RH_SUPERIORPARIETAL','CTX_RH_SUPERIORTEMPORAL','CTX_RH_SUPRAMARGINAL','CTX_RH_TEMPORALPOLE','CTX_RH_TRANSVERSETEMPORAL','LEFT_ACCUMBENS_AREA','LEFT_AMYGDALA','LEFT_CAUDATE','LEFT_CHOROID_PLEXUS','LEFT_HIPPOCAMPUS','LEFT_PALLIDUM','LEFT_PUTAMEN','LEFT_THALAMUS_PROPER','LEFT_VENTRALDC','RIGHT_ACCUMBENS_AREA','RIGHT_AMYGDALA','RIGHT_CAUDATE','RIGHT_CHOROID_PLEXUS','RIGHT_HIPPOCAMPUS','RIGHT_PALLIDUM','RIGHT_PUTAMEN','RIGHT_THALAMUS_PROPER','RIGHT_VENTRALDC')
regions = c('CTX_LH_CAUDALMIDDLEFRONTAL', 'CTX_LH_LATERALORBITOFRONTAL', 'CTX_LH_MEDIALORBITOFRONTAL', 'CTX_LH_PARSOPERCULARIS', 'CTX_LH_PARSORBITALIS', 'CTX_LH_PARSTRIANGULARIS', 'CTX_LH_ROSTRALMIDDLEFRONTAL', 'CTX_LH_SUPERIORFRONTAL', 'CTX_LH_FRONTALPOLE', 'CTX_RH_CAUDALMIDDLEFRONTAL', 'CTX_RH_LATERALORBITOFRONTAL', 'CTX_RH_MEDIALORBITOFRONTAL', 'CTX_RH_PARSOPERCULARIS', 'CTX_RH_PARSORBITALIS', 'CTX_RH_PARSTRIANGULARIS', 'CTX_RH_ROSTRALMIDDLEFRONTAL', 'CTX_RH_SUPERIORFRONTAL', 'CTX_RH_FRONTALPOLE', 'CTX_LH_INFERIORPARIETAL', 'CTX_LH_PRECUNEUS', 'CTX_LH_SUPERIORPARIETAL', 'CTX_LH_SUPRAMARGINAL', 'CTX_RH_INFERIORPARIETAL', 'CTX_RH_PRECUNEUS', 'CTX_RH_SUPERIORPARIETAL', 'CTX_RH_SUPRAMARGINAL', 'CTX_LH_MIDDLETEMPORAL', 'CTX_LH_SUPERIORTEMPORAL', 'CTX_RH_MIDDLETEMPORAL', 'CTX_RH_SUPERIORTEMPORAL', 'CTX_LH_CAUDALANTERIORCINGULATE', 'CTX_LH_ISTHMUSCINGULATE', 'CTX_LH_POSTERIORCINGULATE', 'CTX_LH_ROSTRALANTERIORCINGULATE', 'CTX_RH_CAUDALANTERIORCINGULATE', 'CTX_RH_ISTHMUSCINGULATE', 'CTX_RH_POSTERIORCINGULATE', 'CTX_RH_ROSTRALANTERIORCINGULATE')
for (region in regions) {
df[region] = df[region]/df['COMPOSITE_REF']
}
df = df[,c(demog,regions)]
# create factors
df$RID = factor(df$RID)
df$Gender = factor(df$Gender)
df$APOE4_BIN = factor(df$APOE4_BIN)
# Run anova
results = data.frame()
for (region in regions) {
form = paste(region,'~ accum + Gender + APOE4_BIN + Age.AV45')
fm = lm(form,df)
fm.summary = summary(fm)
accum_coef = as.data.frame(fm.summary$coefficients['accumTRUE',])
colnames(accum_coef) = c(region)
results = rbind(results,t(accum_coef))
}
results = results[order(results$`Pr(>|t|)`),]
# bonferroni correct
results$p.bonferroni = p.adjust(results$`Pr(>|t|)`, method = "bonferroni")
results$p.holm = p.adjust(results$`Pr(>|t|)`, method = "holm")
write.csv(results,file=out.name)
input_file = '/usr/local/jagust/ADNI_BL_AV45Neg_Normals.csv'
df = read.csv(input_file)
slope.thresh = 0.004
# get the accumulators
df = df[complete.cases(df$AV45_NONTP_BigRef_Slope),]
df$accum = factor(df$AV45_NONTP_BigRef_Slope > slope.thresh)
# df = df[complete.cases(df$AV45_NONTP_BigRef_Slope_3pts),]
# df$accum = factor(df$AV45_NONTP_BigRef_Slope_3pts > slope.thresh)
# output file name
out.name = '/usr/local/jagust/AV45_NegNormal_accumAllgroup_region_anova.csv'
# out.name = '/usr/local/jagust/AV45_NegNormal_accum3ptgroup_region_anova.csv'
demog = c('RID','Gender','APOE4_BIN','Age.AV45','AV45_NONTP_BigRef_Slope','AV45_NONTP_BigRef_Slope_3pts')
# regions = c('CTX_LH_BANKSSTS','CTX_LH_CAUDALANTERIORCINGULATE','CTX_LH_CAUDALMIDDLEFRONTAL','CTX_LH_CUNEUS','CTX_LH_ENTORHINAL','CTX_LH_FRONTALPOLE','CTX_LH_FUSIFORM','CTX_LH_INFERIORPARIETAL','CTX_LH_INFERIORTEMPORAL','CTX_LH_INSULA','CTX_LH_ISTHMUSCINGULATE','CTX_LH_LATERALOCCIPITAL','CTX_LH_LATERALORBITOFRONTAL','CTX_LH_LINGUAL','CTX_LH_MEDIALORBITOFRONTAL','CTX_LH_MIDDLETEMPORAL','CTX_LH_PARACENTRAL','CTX_LH_PARAHIPPOCAMPAL','CTX_LH_PARSOPERCULARIS','CTX_LH_PARSORBITALIS','CTX_LH_PARSTRIANGULARIS','CTX_LH_PERICALCARINE','CTX_LH_POSTCENTRAL','CTX_LH_POSTERIORCINGULATE','CTX_LH_PRECENTRAL','CTX_LH_PRECUNEUS','CTX_LH_ROSTRALANTERIORCINGULATE','CTX_LH_ROSTRALMIDDLEFRONTAL','CTX_LH_SUPERIORFRONTAL','CTX_LH_SUPERIORPARIETAL','CTX_LH_SUPERIORTEMPORAL','CTX_LH_SUPRAMARGINAL','CTX_LH_TEMPORALPOLE','CTX_LH_TRANSVERSETEMPORAL','CTX_RH_BANKSSTS','CTX_RH_CAUDALANTERIORCINGULATE','CTX_RH_CAUDALMIDDLEFRONTAL','CTX_RH_CUNEUS','CTX_RH_ENTORHINAL','CTX_RH_FRONTALPOLE','CTX_RH_FUSIFORM','CTX_RH_INFERIORPARIETAL','CTX_RH_INFERIORTEMPORAL','CTX_RH_INSULA','CTX_RH_ISTHMUSCINGULATE','CTX_RH_LATERALOCCIPITAL','CTX_RH_LATERALORBITOFRONTAL','CTX_RH_LINGUAL','CTX_RH_MEDIALORBITOFRONTAL','CTX_RH_MIDDLETEMPORAL','CTX_RH_PARACENTRAL','CTX_RH_PARAHIPPOCAMPAL','CTX_RH_PARSOPERCULARIS','CTX_RH_PARSORBITALIS','CTX_RH_PARSTRIANGULARIS','CTX_RH_PERICALCARINE','CTX_RH_POSTCENTRAL','CTX_RH_POSTERIORCINGULATE','CTX_RH_PRECENTRAL','CTX_RH_PRECUNEUS','CTX_RH_ROSTRALANTERIORCINGULATE','CTX_RH_ROSTRALMIDDLEFRONTAL','CTX_RH_SUPERIORFRONTAL','CTX_RH_SUPERIORPARIETAL','CTX_RH_SUPERIORTEMPORAL','CTX_RH_SUPRAMARGINAL','CTX_RH_TEMPORALPOLE','CTX_RH_TRANSVERSETEMPORAL','LEFT_ACCUMBENS_AREA','LEFT_AMYGDALA','LEFT_CAUDATE','LEFT_CHOROID_PLEXUS','LEFT_HIPPOCAMPUS','LEFT_PALLIDUM','LEFT_PUTAMEN','LEFT_THALAMUS_PROPER','LEFT_VENTRALDC','RIGHT_ACCUMBENS_AREA','RIGHT_AMYGDALA','RIGHT_CAUDATE','RIGHT_CHOROID_PLEXUS','RIGHT_HIPPOCAMPUS','RIGHT_PALLIDUM','RIGHT_PUTAMEN','RIGHT_THALAMUS_PROPER','RIGHT_VENTRALDC')
regions = c('CTX_LH_CAUDALMIDDLEFRONTAL', 'CTX_LH_LATERALORBITOFRONTAL', 'CTX_LH_MEDIALORBITOFRONTAL', 'CTX_LH_PARSOPERCULARIS', 'CTX_LH_PARSORBITALIS', 'CTX_LH_PARSTRIANGULARIS', 'CTX_LH_ROSTRALMIDDLEFRONTAL', 'CTX_LH_SUPERIORFRONTAL', 'CTX_LH_FRONTALPOLE', 'CTX_RH_CAUDALMIDDLEFRONTAL', 'CTX_RH_LATERALORBITOFRONTAL', 'CTX_RH_MEDIALORBITOFRONTAL', 'CTX_RH_PARSOPERCULARIS', 'CTX_RH_PARSORBITALIS', 'CTX_RH_PARSTRIANGULARIS', 'CTX_RH_ROSTRALMIDDLEFRONTAL', 'CTX_RH_SUPERIORFRONTAL', 'CTX_RH_FRONTALPOLE', 'CTX_LH_INFERIORPARIETAL', 'CTX_LH_PRECUNEUS', 'CTX_LH_SUPERIORPARIETAL', 'CTX_LH_SUPRAMARGINAL', 'CTX_RH_INFERIORPARIETAL', 'CTX_RH_PRECUNEUS', 'CTX_RH_SUPERIORPARIETAL', 'CTX_RH_SUPRAMARGINAL', 'CTX_LH_MIDDLETEMPORAL', 'CTX_LH_SUPERIORTEMPORAL', 'CTX_RH_MIDDLETEMPORAL', 'CTX_RH_SUPERIORTEMPORAL', 'CTX_LH_CAUDALANTERIORCINGULATE', 'CTX_LH_ISTHMUSCINGULATE', 'CTX_LH_POSTERIORCINGULATE', 'CTX_LH_ROSTRALANTERIORCINGULATE', 'CTX_RH_CAUDALANTERIORCINGULATE', 'CTX_RH_ISTHMUSCINGULATE', 'CTX_RH_POSTERIORCINGULATE', 'CTX_RH_ROSTRALANTERIORCINGULATE')
for (region in regions) {
df[region] = df[region]/df['COMPOSITE_REF']
}
df = df[,c(demog,regions)]
# create factors
df$RID = factor(df$RID)
df$Gender = factor(df$Gender)
df$APOE4_BIN = factor(df$APOE4_BIN)
df = df[complete.cases(df$AV45_NONTP_BigRef_Slope),]
df$accum = factor(df$AV45_NONTP_BigRef_Slope > slope.thresh)
input_file = '/usr/local/jagust/ADNI_BL_AV45Neg_Normals.csv'
df = read.csv(input_file)
slope.thresh = 0.004
# get the accumulators
df = df[complete.cases(df$AV45_NONTP_BigRef_Slope),]
df$accum = factor(df$AV45_NONTP_BigRef_Slope > slope.thresh)
# df = df[complete.cases(df$AV45_NONTP_BigRef_Slope_3pts),]
# df$accum = factor(df$AV45_NONTP_BigRef_Slope_3pts > slope.thresh)
# output file name
out.name = '/usr/local/jagust/AV45_NegNormal_accumAllgroup_region_anova.csv'
# out.name = '/usr/local/jagust/AV45_NegNormal_accum3ptgroup_region_anova.csv'
demog = c('RID','Gender','accum','APOE4_BIN','Age.AV45','AV45_NONTP_BigRef_Slope','AV45_NONTP_BigRef_Slope_3pts')
# regions = c('CTX_LH_BANKSSTS','CTX_LH_CAUDALANTERIORCINGULATE','CTX_LH_CAUDALMIDDLEFRONTAL','CTX_LH_CUNEUS','CTX_LH_ENTORHINAL','CTX_LH_FRONTALPOLE','CTX_LH_FUSIFORM','CTX_LH_INFERIORPARIETAL','CTX_LH_INFERIORTEMPORAL','CTX_LH_INSULA','CTX_LH_ISTHMUSCINGULATE','CTX_LH_LATERALOCCIPITAL','CTX_LH_LATERALORBITOFRONTAL','CTX_LH_LINGUAL','CTX_LH_MEDIALORBITOFRONTAL','CTX_LH_MIDDLETEMPORAL','CTX_LH_PARACENTRAL','CTX_LH_PARAHIPPOCAMPAL','CTX_LH_PARSOPERCULARIS','CTX_LH_PARSORBITALIS','CTX_LH_PARSTRIANGULARIS','CTX_LH_PERICALCARINE','CTX_LH_POSTCENTRAL','CTX_LH_POSTERIORCINGULATE','CTX_LH_PRECENTRAL','CTX_LH_PRECUNEUS','CTX_LH_ROSTRALANTERIORCINGULATE','CTX_LH_ROSTRALMIDDLEFRONTAL','CTX_LH_SUPERIORFRONTAL','CTX_LH_SUPERIORPARIETAL','CTX_LH_SUPERIORTEMPORAL','CTX_LH_SUPRAMARGINAL','CTX_LH_TEMPORALPOLE','CTX_LH_TRANSVERSETEMPORAL','CTX_RH_BANKSSTS','CTX_RH_CAUDALANTERIORCINGULATE','CTX_RH_CAUDALMIDDLEFRONTAL','CTX_RH_CUNEUS','CTX_RH_ENTORHINAL','CTX_RH_FRONTALPOLE','CTX_RH_FUSIFORM','CTX_RH_INFERIORPARIETAL','CTX_RH_INFERIORTEMPORAL','CTX_RH_INSULA','CTX_RH_ISTHMUSCINGULATE','CTX_RH_LATERALOCCIPITAL','CTX_RH_LATERALORBITOFRONTAL','CTX_RH_LINGUAL','CTX_RH_MEDIALORBITOFRONTAL','CTX_RH_MIDDLETEMPORAL','CTX_RH_PARACENTRAL','CTX_RH_PARAHIPPOCAMPAL','CTX_RH_PARSOPERCULARIS','CTX_RH_PARSORBITALIS','CTX_RH_PARSTRIANGULARIS','CTX_RH_PERICALCARINE','CTX_RH_POSTCENTRAL','CTX_RH_POSTERIORCINGULATE','CTX_RH_PRECENTRAL','CTX_RH_PRECUNEUS','CTX_RH_ROSTRALANTERIORCINGULATE','CTX_RH_ROSTRALMIDDLEFRONTAL','CTX_RH_SUPERIORFRONTAL','CTX_RH_SUPERIORPARIETAL','CTX_RH_SUPERIORTEMPORAL','CTX_RH_SUPRAMARGINAL','CTX_RH_TEMPORALPOLE','CTX_RH_TRANSVERSETEMPORAL','LEFT_ACCUMBENS_AREA','LEFT_AMYGDALA','LEFT_CAUDATE','LEFT_CHOROID_PLEXUS','LEFT_HIPPOCAMPUS','LEFT_PALLIDUM','LEFT_PUTAMEN','LEFT_THALAMUS_PROPER','LEFT_VENTRALDC','RIGHT_ACCUMBENS_AREA','RIGHT_AMYGDALA','RIGHT_CAUDATE','RIGHT_CHOROID_PLEXUS','RIGHT_HIPPOCAMPUS','RIGHT_PALLIDUM','RIGHT_PUTAMEN','RIGHT_THALAMUS_PROPER','RIGHT_VENTRALDC')
regions = c('CTX_LH_CAUDALMIDDLEFRONTAL', 'CTX_LH_LATERALORBITOFRONTAL', 'CTX_LH_MEDIALORBITOFRONTAL', 'CTX_LH_PARSOPERCULARIS', 'CTX_LH_PARSORBITALIS', 'CTX_LH_PARSTRIANGULARIS', 'CTX_LH_ROSTRALMIDDLEFRONTAL', 'CTX_LH_SUPERIORFRONTAL', 'CTX_LH_FRONTALPOLE', 'CTX_RH_CAUDALMIDDLEFRONTAL', 'CTX_RH_LATERALORBITOFRONTAL', 'CTX_RH_MEDIALORBITOFRONTAL', 'CTX_RH_PARSOPERCULARIS', 'CTX_RH_PARSORBITALIS', 'CTX_RH_PARSTRIANGULARIS', 'CTX_RH_ROSTRALMIDDLEFRONTAL', 'CTX_RH_SUPERIORFRONTAL', 'CTX_RH_FRONTALPOLE', 'CTX_LH_INFERIORPARIETAL', 'CTX_LH_PRECUNEUS', 'CTX_LH_SUPERIORPARIETAL', 'CTX_LH_SUPRAMARGINAL', 'CTX_RH_INFERIORPARIETAL', 'CTX_RH_PRECUNEUS', 'CTX_RH_SUPERIORPARIETAL', 'CTX_RH_SUPRAMARGINAL', 'CTX_LH_MIDDLETEMPORAL', 'CTX_LH_SUPERIORTEMPORAL', 'CTX_RH_MIDDLETEMPORAL', 'CTX_RH_SUPERIORTEMPORAL', 'CTX_LH_CAUDALANTERIORCINGULATE', 'CTX_LH_ISTHMUSCINGULATE', 'CTX_LH_POSTERIORCINGULATE', 'CTX_LH_ROSTRALANTERIORCINGULATE', 'CTX_RH_CAUDALANTERIORCINGULATE', 'CTX_RH_ISTHMUSCINGULATE', 'CTX_RH_POSTERIORCINGULATE', 'CTX_RH_ROSTRALANTERIORCINGULATE')
for (region in regions) {
df[region] = df[region]/df['COMPOSITE_REF']
}
df = df[,c(demog,regions)]
# create factors
df$RID = factor(df$RID)
df$Gender = factor(df$Gender)
df$APOE4_BIN = factor(df$APOE4_BIN)
# Run anova
results = data.frame()
for (region in regions) {
form = paste(region,'~ accum + Gender + APOE4_BIN + Age.AV45')
fm = lm(form,df)
fm.summary = summary(fm)
accum_coef = as.data.frame(fm.summary$coefficients['accumTRUE',])
colnames(accum_coef) = c(region)
results = rbind(results,t(accum_coef))
}
results = results[order(results$`Pr(>|t|)`),]
# bonferroni correct
results$p.bonferroni = p.adjust(results$`Pr(>|t|)`, method = "bonferroni")
results$p.holm = p.adjust(results$`Pr(>|t|)`, method = "holm")
write.csv(results,file=out.name)
input_file = '/usr/local/jagust/ADNI_BL_AV45Neg_Normals.csv'
df = read.csv(input_file)
slope.thresh = 0.004
# get the accumulators
# df = df[complete.cases(df$AV45_NONTP_BigRef_Slope),]
# df$accum = factor(df$AV45_NONTP_BigRef_Slope > slope.thresh)
df = df[complete.cases(df$AV45_NONTP_BigRef_Slope_3pts),]
df$accum = factor(df$AV45_NONTP_BigRef_Slope_3pts > slope.thresh)
# output file name
# out.name = '/usr/local/jagust/AV45_NegNormal_accumAllgroup_region_anova.csv'
out.name = '/usr/local/jagust/AV45_NegNormal_accum3ptgroup_region_anova.csv'
demog = c('RID','Gender','accum','APOE4_BIN','Age.AV45','AV45_NONTP_BigRef_Slope','AV45_NONTP_BigRef_Slope_3pts')
# regions = c('CTX_LH_BANKSSTS','CTX_LH_CAUDALANTERIORCINGULATE','CTX_LH_CAUDALMIDDLEFRONTAL','CTX_LH_CUNEUS','CTX_LH_ENTORHINAL','CTX_LH_FRONTALPOLE','CTX_LH_FUSIFORM','CTX_LH_INFERIORPARIETAL','CTX_LH_INFERIORTEMPORAL','CTX_LH_INSULA','CTX_LH_ISTHMUSCINGULATE','CTX_LH_LATERALOCCIPITAL','CTX_LH_LATERALORBITOFRONTAL','CTX_LH_LINGUAL','CTX_LH_MEDIALORBITOFRONTAL','CTX_LH_MIDDLETEMPORAL','CTX_LH_PARACENTRAL','CTX_LH_PARAHIPPOCAMPAL','CTX_LH_PARSOPERCULARIS','CTX_LH_PARSORBITALIS','CTX_LH_PARSTRIANGULARIS','CTX_LH_PERICALCARINE','CTX_LH_POSTCENTRAL','CTX_LH_POSTERIORCINGULATE','CTX_LH_PRECENTRAL','CTX_LH_PRECUNEUS','CTX_LH_ROSTRALANTERIORCINGULATE','CTX_LH_ROSTRALMIDDLEFRONTAL','CTX_LH_SUPERIORFRONTAL','CTX_LH_SUPERIORPARIETAL','CTX_LH_SUPERIORTEMPORAL','CTX_LH_SUPRAMARGINAL','CTX_LH_TEMPORALPOLE','CTX_LH_TRANSVERSETEMPORAL','CTX_RH_BANKSSTS','CTX_RH_CAUDALANTERIORCINGULATE','CTX_RH_CAUDALMIDDLEFRONTAL','CTX_RH_CUNEUS','CTX_RH_ENTORHINAL','CTX_RH_FRONTALPOLE','CTX_RH_FUSIFORM','CTX_RH_INFERIORPARIETAL','CTX_RH_INFERIORTEMPORAL','CTX_RH_INSULA','CTX_RH_ISTHMUSCINGULATE','CTX_RH_LATERALOCCIPITAL','CTX_RH_LATERALORBITOFRONTAL','CTX_RH_LINGUAL','CTX_RH_MEDIALORBITOFRONTAL','CTX_RH_MIDDLETEMPORAL','CTX_RH_PARACENTRAL','CTX_RH_PARAHIPPOCAMPAL','CTX_RH_PARSOPERCULARIS','CTX_RH_PARSORBITALIS','CTX_RH_PARSTRIANGULARIS','CTX_RH_PERICALCARINE','CTX_RH_POSTCENTRAL','CTX_RH_POSTERIORCINGULATE','CTX_RH_PRECENTRAL','CTX_RH_PRECUNEUS','CTX_RH_ROSTRALANTERIORCINGULATE','CTX_RH_ROSTRALMIDDLEFRONTAL','CTX_RH_SUPERIORFRONTAL','CTX_RH_SUPERIORPARIETAL','CTX_RH_SUPERIORTEMPORAL','CTX_RH_SUPRAMARGINAL','CTX_RH_TEMPORALPOLE','CTX_RH_TRANSVERSETEMPORAL','LEFT_ACCUMBENS_AREA','LEFT_AMYGDALA','LEFT_CAUDATE','LEFT_CHOROID_PLEXUS','LEFT_HIPPOCAMPUS','LEFT_PALLIDUM','LEFT_PUTAMEN','LEFT_THALAMUS_PROPER','LEFT_VENTRALDC','RIGHT_ACCUMBENS_AREA','RIGHT_AMYGDALA','RIGHT_CAUDATE','RIGHT_CHOROID_PLEXUS','RIGHT_HIPPOCAMPUS','RIGHT_PALLIDUM','RIGHT_PUTAMEN','RIGHT_THALAMUS_PROPER','RIGHT_VENTRALDC')
regions = c('CTX_LH_CAUDALMIDDLEFRONTAL', 'CTX_LH_LATERALORBITOFRONTAL', 'CTX_LH_MEDIALORBITOFRONTAL', 'CTX_LH_PARSOPERCULARIS', 'CTX_LH_PARSORBITALIS', 'CTX_LH_PARSTRIANGULARIS', 'CTX_LH_ROSTRALMIDDLEFRONTAL', 'CTX_LH_SUPERIORFRONTAL', 'CTX_LH_FRONTALPOLE', 'CTX_RH_CAUDALMIDDLEFRONTAL', 'CTX_RH_LATERALORBITOFRONTAL', 'CTX_RH_MEDIALORBITOFRONTAL', 'CTX_RH_PARSOPERCULARIS', 'CTX_RH_PARSORBITALIS', 'CTX_RH_PARSTRIANGULARIS', 'CTX_RH_ROSTRALMIDDLEFRONTAL', 'CTX_RH_SUPERIORFRONTAL', 'CTX_RH_FRONTALPOLE', 'CTX_LH_INFERIORPARIETAL', 'CTX_LH_PRECUNEUS', 'CTX_LH_SUPERIORPARIETAL', 'CTX_LH_SUPRAMARGINAL', 'CTX_RH_INFERIORPARIETAL', 'CTX_RH_PRECUNEUS', 'CTX_RH_SUPERIORPARIETAL', 'CTX_RH_SUPRAMARGINAL', 'CTX_LH_MIDDLETEMPORAL', 'CTX_LH_SUPERIORTEMPORAL', 'CTX_RH_MIDDLETEMPORAL', 'CTX_RH_SUPERIORTEMPORAL', 'CTX_LH_CAUDALANTERIORCINGULATE', 'CTX_LH_ISTHMUSCINGULATE', 'CTX_LH_POSTERIORCINGULATE', 'CTX_LH_ROSTRALANTERIORCINGULATE', 'CTX_RH_CAUDALANTERIORCINGULATE', 'CTX_RH_ISTHMUSCINGULATE', 'CTX_RH_POSTERIORCINGULATE', 'CTX_RH_ROSTRALANTERIORCINGULATE')
for (region in regions) {
df[region] = df[region]/df['COMPOSITE_REF']
}
df = df[,c(demog,regions)]
# create factors
df$RID = factor(df$RID)
df$Gender = factor(df$Gender)
df$APOE4_BIN = factor(df$APOE4_BIN)
# Run anova
results = data.frame()
for (region in regions) {
form = paste(region,'~ accum + Gender + APOE4_BIN + Age.AV45')
fm = lm(form,df)
fm.summary = summary(fm)
accum_coef = as.data.frame(fm.summary$coefficients['accumTRUE',])
colnames(accum_coef) = c(region)
results = rbind(results,t(accum_coef))
}
results = results[order(results$`Pr(>|t|)`),]
# bonferroni correct
results$p.bonferroni = p.adjust(results$`Pr(>|t|)`, method = "bonferroni")
results$p.holm = p.adjust(results$`Pr(>|t|)`, method = "holm")
write.csv(results,file=out.name)
library(mixtools)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = df[complete.cases(df$AV45_NONTP_1_BigRef),]
df$AV45_NONTP_1_BigRef_BIN.82 = (df$AV45_NONTP_1_BigRef >= 0.82)
# only take negative normals at baseline
# df = df[(df$Diag.AV45=='N' & df$AV45_NONTP_1_BigRef_BIN.82==0),]
# only take negatives at baseline
df = df[(df$AV45_NONTP_1_BigRef_BIN.82==0),]
# extract values
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.2]
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
hist(bigref.vals,breaks=100)
hist(twopt.slope.vals,breaks=100)
hist(threept.slope.vals,breaks=100)
hist(allpt.slope.vals,breaks=100)
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
mus
sigmas = mix.results$sigma
sigmas
lambdas = mix.results$lambda
lambdas
hist(allpt.slope.vals,breaks=100)
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
hist(twopt.slope.vals,breaks=100)
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.05]
hist(twopt.slope.vals,breaks=100)
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
threept.slope.vals = threept.slope.vals[threept.slope.vals < 0.05]
hist(threept.slope.vals,breaks=100)
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
hist(threept.slope.vals,breaks=100)
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
hist(twopt.slope.vals,breaks=100)
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
hist(allpt.slope.vals,breaks=100)
library(mixtools)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = df[complete.cases(df$AV45_NONTP_1_BigRef),]
df$AV45_NONTP_1_BigRef_BIN.82 = (df$AV45_NONTP_1_BigRef >= 0.82)
# only take negative normals at baseline
# df = df[(df$Diag.AV45=='N' & df$AV45_NONTP_1_BigRef_BIN.82==0),]
# only take negatives at baseline
df = df[(df$AV45_NONTP_1_BigRef_BIN.82==0),]
# extract values
bigref.vals = df$AV45_NONTP_1_BigRef
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
twopt.slope.vals = twopt.slope.vals[twopt.slope.vals < 0.05]
threept.slope.vals = df$AV45_NONTP_BigRef_Slope_3pts
threept.slope.vals = threept.slope.vals[!is.na(threept.slope.vals)]
threept.slope.vals = threept.slope.vals[threept.slope.vals < 0.05]
allpt.slope.vals = df$AV45_NONTP_BigRef_Slope
allpt.slope.vals = allpt.slope.vals[!is.na(allpt.slope.vals)]
allpt.slope.vals = allpt.slope.vals[allpt.slope.vals < 0.05]
hist(bigref.vals,breaks=100)
hist(twopt.slope.vals,breaks=100)
hist(threept.slope.vals,breaks=100)
hist(allpt.slope.vals,breaks=100)
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
mus
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
max(twopt.slope.vals)
mix.results = normalmixEM(allpt.slope.vals)
plot(mix.results, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8)
mus = mix.results$mu
sigmas = mix.results$sigma
lambdas = mix.results$lambda
f <- function(x) dnorm(x, m=mus[1], sd=sigmas[1]) * lambdas[1] - dnorm(x, m=mus[2], sd=sigmas[2]) * lambdas[2]
root.results = uniroot(f, interval=c(0,0.06))
root.results$root
mus
df
df[df$AV45_NONTP_BigRef_Slope == 0.066]
df[df$AV45_NONTP_BigRef_Slope == 0.066,]
df[df$AV45_NONTP_BigRef_Slope == 0.066,'RID']
twopt.slope.vals = df$AV45_NONTP_BigRef_Slope_2pts
twopt.slope.vals = twopt.slope.vals[!is.na(twopt.slope.vals)]
max(twopt.slope.vals)
df[df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals)]
df[df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals),]
df[,df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals)]
df[df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals)]
df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals)
df[df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals),]
df[df$AV45_NONTP_BigRef_Slope_2pts == max(twopt.slope.vals),]$RID
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_25_16.csv',skip=1)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_28_16.csv',skip=1)
df = read.csv('~/Google Drive/ADNI_shared/Andy Documentation/FDG_AV45_COG_data/FDG_AV45_COGdata_10_28_16.csv',skip=1)
plot(df$AV45_NONTP_1_EarlyAccum.WMratio,df$AV45_NONTP_1_WMratio)
