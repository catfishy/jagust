toplot = c(0,1,2,3,14,15)
# plot together
polfit = function(x) fm_av45_onlycs$coefficients[3]*x^2 + fm_av45_onlycs$coefficients[2]*x + fm_av45_onlycs$coefficients[1]
colors = rainbow(length(toplot))
plot(df_av45[,'CORTICAL_SUMMARY_prior'],df_av45[,'CORTICAL_SUMMARY_slope'], pch=4, cex=1, lwd=0.6, main='Significant Pattern Groups', xlab='Baseline Florbetapir Cortical Summary SUVR', ylab='Cortical Summary SUVR Annualized Change')
for(i in 1:length(toplot)){
g = toplot[i]
c = colors[i]
x = df_av45[which(df_av45$group==g),'CORTICAL_SUMMARY_prior']
y = df_av45[which(df_av45$group==g),'CORTICAL_SUMMARY_slope']
points(x,y, bg=c, pch=21, cex=1.1, lwd=1)
}
curve(polfit,add=T)
legend('topright', legend=sapply(toplot, function(x) paste('Group #',x,sep='')), fill=colors)
df = read.csv('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
df = read.csv('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=TRUE)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
df['AV45_Date']
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
for (i in names(df)){
if (i %in% to_factor){
df[,eval(i)] = factor(df_av45[,eval(i)])
}
}
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
for (i in names(df)){
if (i %in% to_factor){
df[,eval(i)] = factor(df[,eval(i)])
}
}
adas_columns = Filter(function(i){startsWith(i,'ADAS')}, names(df))
adas_columns
grepl
adas_columns = Filter(function(i){grepl(i,'ADAS')}, names(df))
adas_columns
adas_columns = Filter(function(i){grepl('ADAS',i)}, names(df))
adas_columns = Filter(function(i){grepl(i,'ADAS')}, names(df))
adas_columns
names(df)
Filter(function(i){grepl('ADAS',i)}, names(df))
adas_columns = Filter(function(i){grepl('ADAS',i)}, names(df))
append(adas_columns,to_keep)
to_keep = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
append(adas_columns,to_keep)
to_keep = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
adas_columns = Filter(function(i){grepl('ADAS',i)}, names(df))
to_keep = append(to_keep,adas_columns)
df = df[to_keep]
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
to_keep = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
adas_columns = Filter(function(i){grepl('ADAS',i)}, names(df))
to_keep = append(to_keep,adas_columns)
df = df[to_keep]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
for (i in names(df)){
if (i %in% to_factor){
df[,eval(i)] = factor(df[,eval(i)])
}
}
library(lme4)
library(gdata)
library(psych)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEreltoAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
to_keep = append(demo_columns,av45_columns,adas_time_columns,adas_value_columns)
df = df[to_keep]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
for (i in names(df)){
if (i %in% to_factor){
df[,eval(i)] = factor(df[,eval(i)])
}
}
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
to_keep = append(demo_columns,av45_columns,adas_time_columns,adas_value_columns)
c(demo_columns,av45_columns,adas_time_columns)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEreltoAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
to_keep = c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)
df = df[to_keep]
to_keep
library(tidyr)
melt(df, id.vars=demo_columns)
df_long = melt(df,
id.vars=demo_columns,
measure.vars=adas_value_columns)
df_long
df_time_long = melt(df,
id.vars=demo_columns,
measure.vars=adas_value_columns)
df_value_long = melt(df,
id.vars=demo_columns,
measure.vars=adas_time_columns)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEreltoAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
to_keep = c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)
df = df[to_keep]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
for (i in names(df)){
if (i %in% to_factor){
df[,eval(i)] = factor(df[,eval(i)])
}
}
df_time_long = melt(df,
id.vars=demo_columns,
measure.vars=adas_value_columns)
df_value_long = melt(df,
id.vars=demo_columns,
measure.vars=adas_time_columns)
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
names(df_time_wide)
gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df(c(demo_columns,av45_columns,adas_value_columns))
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df(c(demo_columns,av45_columns,adas_value_columns))
colnames(df_time_wide) = gsub('ADAScog','TP',names(df_time_wide))
c(demo_columns,av45_columns,adas_value_columns)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEreltoAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
for (i in names(df)){
if (i %in% to_factor){
df[,eval(i)] = factor(df[,eval(i)])
}
}
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_time_wide) = gsub('ADAScog','TP',names(df_time_wide))
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
factor.convert = function(x) {
if (i %in% to_factor){
factor(df[,eval(i)])
} else {
df[,eval(i)]
}
}
apply(names(df),factor.convert)
apply(names(df),1,factor.convert)
lapply(names(df),factor.convert)
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
factor.convert = function(x) {
df[,eval(x)] = factor(df[,eval(i)])
}
colnames(df) = lapply(to_factor,factor.convert)
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
factor.convert = function(x) {
df[,eval(x)] = factor(df[,eval(i)])
}
lapply(to_factor,factor.convert)
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
factor.convert = function(x) {
df[,eval(x)] = factor(df[,eval(x)])
}
lapply(to_factor,factor.convert)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEreltoAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
factor.convert = function(x) {
df[,eval(x)] = factor(df[,eval(x)])
}
lapply(to_factor,factor.convert)
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEreltoAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_time_wide) = gsub('ADAScog','TP',names(df_time_wide))
df_time_long = melt(df_time_wide,
id.vars=demo_columns,
measure.vars=adas_value_columns,
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=demo_columns,
measure.vars=adas_time_columns,
variable.name='timepoint',
value.name='value')
df_time_long = melt(df_time_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_time_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
View(df_value_wide)
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
demo_columns
c(demo_columns,'timepoint')
merge_on = c(demo_columns,'timepoint')
merge(df_time_long_df_value_long,merge_on)
merge(df_time_long,df_value_long,merge_on)
df_long = merge(df_time_long,df_value_long,merge_on)
View(df_long)
View(df_long)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEpostAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEreltoAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demo_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEpostAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEpostAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=demo_columns,
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demo_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
View(df_long)
View(df_long)
df_long = df_long[complete.cases(df_long[,'time']),]
View(df_long)
View(df_long)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEpostAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEpostAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demo_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
df_long = df_long[complete.cases(df_long[,'time']),]
View(df_long)
View(df_long)
fm_tp = lmer(ADAScog. ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
fm_pvc = lmer(ADAScog. ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
View(df_long)
View(df_long)
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEpostAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demo_columns,av45_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
df_long = df_long[complete.cases(df_long[,'time']),]
fm_tp = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
fm_pvc = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender','Age.AV45')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEpostAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEpostAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demo_columns,av45_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
df_long = df_long[complete.cases(df_long[,'time']),]
# Baseline AV45 vs Cog change LME models
fm_tp = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
fm_pvc = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
all_content = readLines('FDG_AV45_COGdata/FDG_AV45_COGdata_03_23_16.csv')
skip_first = all_content[-1]
df = read.csv(textConnection(skip_first), header=TRUE, stringsAsFactors=FALSE)
# Keep relevant columns
demo_columns = c('RID','APOE4_BIN','Diag.AV45_long','Gender','Age.AV45','Edu..Yrs.')
av45_columns = c('AV45_PVC_CorticalSummary_WholeCereb_BL','AV45_TP_wcereb','AV45_NONTP_wcereb')
adas_time_columns = Filter(function(i){grepl('TIMEpostAV45_ADAS',i)}, names(df))
adas_value_columns = Filter(function(i){grepl('ADAScog',i)}, names(df))
df = df[c(demo_columns,av45_columns,adas_time_columns,adas_value_columns)]
# Convert to factors
to_factor = c('RID','APOE4_BIN','Diag.AV45_long','Gender')
df[to_factor] = lapply(df[to_factor], as.factor)
# Convert to long format
df_time_wide = df[c(demo_columns,av45_columns,adas_time_columns)]
colnames(df_time_wide) = gsub('TIMEpostAV45_ADAS','TP',names(df_time_wide))
df_value_wide = df[c(demo_columns,av45_columns,adas_value_columns)]
colnames(df_value_wide) = gsub('ADAScog','TP',names(df_value_wide))
df_time_long = melt(df_time_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_time_wide)),
variable.name='timepoint',
value.name='time')
df_value_long = melt(df_value_wide,
id.vars=c(demo_columns,av45_columns),
measure.vars=Filter(function(x){startsWith(x,'TP')},names(df_value_wide)),
variable.name='timepoint',
value.name='value')
merge_on = c(demo_columns,av45_columns,'timepoint')
df_long = merge(df_time_long,df_value_long,merge_on)
df_long = df_long[complete.cases(df_long[,'time']),]
# Baseline AV45 vs Cog change LME models
fm_tp = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
fm_pvc = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
summary(fm_tp)
fm_pvc
fm_tp = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + time + (1 + time | RID), df_long)
fm_pvc = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + time + (1 + time | RID), df_long)
summary(fm_tp)
fm_tp = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
fm_pvc = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long)
summary(fm_pvc)
summary(fm_tp)
fm_tp = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long)
fm_pvc = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long)
summary(fm_tp)
summary(fm_pvc)
View(df_long)
View(df_long)
df_long_mci = df_av45[which(df_av45$Diag.AV45_long %in% c('EMCI','LMCI'))]
df_long_mci = df_av45[which(df_long$Diag.AV45_long %in% c('EMCI','LMCI'))]
df_long_mci = df_long[which(df_long$Diag.AV45_long %in% c('EMCI','LMCI'))]
which(df_long$Diag.AV45_long %in% c('EMCI','LMCI'))
df_long_mci = df_long[which(df_long$Diag.AV45_long %in% c('EMCI','LMCI')),]
View(df_long_mci)
View(df_long_mci)
df_long_n = df_long[which(df_long$Diag.AV45_long %in% c('N','SMC')),]
df_long_mci = df_long[which(df_long$Diag.AV45_long %in% c('EMCI','LMCI')),]
df_long_ad = df_long[which(df_long$Diag.AV45_long %in% c('AD')),]
fm_tp_n = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long_n)
fm_pvc_n = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long_n)
fm_tp_mci = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long_mci)
fm_pvc_mci = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long_mci)
fm_tp_ad = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long_ad)
fm_pvc_ad = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + Diag.AV45_long + APOE4_BIN*time + (1 + time | RID), df_long_ad)
fm_tp_ad = lmer(value ~ AV45_TP_wcereb + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long_ad)
fm_pvc_ad = lmer(value ~ AV45_PVC_CorticalSummary_WholeCereb_BL + Age.AV45 + Gender + Edu..Yrs. + APOE4_BIN*time + (1 + time | RID), df_long_ad)
summary(fm_tp_ad)
summary(fm_tp_mci)
summary(fm_tp_n)
summary(fm_pvc_n)
summary(fm_tp_mci)
summary(fm_pvc_mci)
